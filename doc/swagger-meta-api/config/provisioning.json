{
  "swagger": "2.0",
  "info": {
    "title": "AgiliumTrade MetaTrader provisioning REST API",
    "version": "1.0.0"
  },
  "basePath": "/api/mt/provisioning",
  "paths": {
    "/users/current/provisioning-profiles": {
      "post": {
        "summary": "Creates a provisioning profile",
        "description": "Creates a provisioning profile. Requires access to trading-account-management-api:rest:public:mt-server-management:createProvisioningProfile method which is included into writer role.",
        "x-authorization": {
          "method": "trading-account-management-api:rest:public:mt-server-management:createProvisioningProfile",
          "roles": [
            "writer"
          ]
        },
        "parameters": [
          {
            "name": "auth-token",
            "description": "Authorization token",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "provisioningProfile",
            "description": "New provisioning profile data",
            "schema": {
              "$ref": "#/definitions/NewProvisioningProfile"
            },
            "in": "body",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Provision profile created successfully",
            "schema": {
              "$ref": "#/definitions/ProvisioningProfileId"
            }
          },
          "400": {
            "description": "Wrong version of MetaTrader (not 4 or 5)",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Authorization failed.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Authorization token has no access to trading-account-management-api:rest:public:mt-server-management:createProvisioningProfile method.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unexpected application error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "get": {
        "summary": "Returns provisioning profiles",
        "description": "Returns provisioning profiles. Requires access to trading-account-management-api:rest:public:mt-server-management:getProvisioningProfiles method which is included into reader role. Requires access to mt-server, mt-manager resources.",
        "x-authorization": {
          "method": "trading-account-management-api:rest:public:mt-server-management:getProvisioningProfiles",
          "roles": [
            "reader"
          ],
          "resources": [
            "mt-server",
            "mt-manager"
          ]
        },
        "parameters": [
          {
            "name": "auth-token",
            "description": "Authorization token",
            "type": "string",
            "in": "header",
            "required": true
          },
          {
            "name": "version",
            "description": "What MetaTrader provisioning profile version is required. Allowed values is 4 and 5. Other values will be ignored.",
            "type": "integer",
            "in": "query"
          },
          {
            "name": "type",
            "description": "Provisioning profile type",
            "enum": [
              "mtTerminal",
              "managerApi",
              "managerUi"
            ],
            "type": "string",
            "in": "query"
          },
          {
            "name": "status",
            "description": "Filter provisioning profile by status. Allowed values is `new` and `active`. Other values will be ignored.",
            "type": "string",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Provisioning profile list",
            "schema": {
              "$ref": "#/definitions/ListOfProvisioningProfiles"
            }
          },
          "401": {
            "description": "Authorization failed.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Authorization token has no access to trading-account-management-api:rest:public:mt-server-management:getProvisioningProfiles method.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unexpected application error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/users/current/provisioning-profiles/{id}/{fileName}": {
      "put": {
        "summary": "Uploads a file to a provisioning profile",
        "description": "Uploads a file to a provisioning profile. Requires access to trading-account-management-api:rest:public:mt-server-management:uploadFile method which is included into writer role. Requires access to mt-server, mt-manager resources.",
        "consumes": [
          "multipart/form-data"
        ],
        "x-authorization": {
          "method": "trading-account-management-api:rest:public:mt-server-management:uploadFile",
          "roles": [
            "writer"
          ],
          "resources": [
            "mt-server",
            "mt-manager"
          ]
        },
        "parameters": [
          {
            "name": "auth-token",
            "description": "Authorization token",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "description": "Id of the profile the file will be uploaded to",
            "type": "string",
            "in": "path",
            "required": true
          },
          {
            "name": "fileName",
            "description": "File name. Allowed: `servers.dat`, `servers.ini`, `broker.srv`, `managerApi.zip``mt4manager.exe`, `mt5managersetup.exe`. Each file type is described below.",
            "type": "string",
            "in": "path",
            "required": true
          },
          {
            "name": "file",
            "description": "It can be one of: 1. servers.dat file from /config MetaTrader 5 data folder. The file is required to create a MetaTrader 5 profile. 2. *.srv or servers.ini file from /config MetaTrader4 system data folder. The file is required to create MetaTrader 4 profile. 3. *.zip archive containing manager API distributive (dlls and C++ headers). 4. mt4manager.exe is MetaTrader 4 Manager installer. The file is required to use manager UI for MetaTrader 4. 5. mt5managersetup.exe is MetaTrader 5 Manager installer. The file is required to use manager UI for MetaTrader 5",
            "type": "file",
            "in": "formData",
            "required": false
          }
        ],
        "responses": {
          "204": {
            "description": "File uploaded successfully"
          },
          "400": {
            "description": "Wrong fileName field value",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Authorization failed.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Authorization token has no access to trading-account-management-api:rest:public:mt-server-management:uploadFile method.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Provisioning profile with the specified id is not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unexpected application error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/users/current/provisioning-profiles/{id}": {
      "get": {
        "summary": "Returns provisioning profile by id",
        "description": "Returns provisioning profile belonging to the current user by profile id. Requires access to trading-account-management-api:rest:public:mt-server-management:getProvisioningProfile method which is included into reader role. Requires access to mt-server, mt-manager resources.",
        "x-authorization": {
          "method": "trading-account-management-api:rest:public:mt-server-management:getProvisioningProfile",
          "roles": [
            "reader"
          ],
          "resources": [
            "mt-server",
            "mt-manager"
          ]
        },
        "parameters": [
          {
            "name": "auth-token",
            "description": "Authorization token",
            "type": "string",
            "in": "header",
            "required": true
          },
          {
            "name": "id",
            "description": "Id of the provisioning profile to be deleted",
            "type": "string",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Provisioning profile returned",
            "schema": {
              "$ref": "#/definitions/ProvisioningProfile"
            }
          },
          "401": {
            "description": "Authorization failed.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Authorization token has no access to trading-account-management-api:rest:public:mt-server-management:getProvisioningProfile method.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Provisioning profile not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unexpected application error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "summary": "Updates provisioning profile",
        "description": "Updates provisioning profile. Requires access to trading-account-management-api:rest:public:mt-server-management:updateProvisioningProfile method which is included into writer role. Requires access to mt-server, mt-manager resources.",
        "x-authorization": {
          "method": "trading-account-management-api:rest:public:mt-server-management:updateProvisioningProfile",
          "roles": [
            "writer"
          ],
          "resources": [
            "mt-server",
            "mt-manager"
          ]
        },
        "parameters": [
          {
            "name": "auth-token",
            "description": "Authorization token",
            "type": "string",
            "in": "header",
            "required": true
          },
          {
            "name": "id",
            "description": "Id of the provisioning profile to be updated",
            "type": "string",
            "in": "path",
            "required": true
          },
          {
            "name": "provisioningProfile",
            "description": "New provisioning profile data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdatedProvisioningProfile"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Provisioning profile updated"
          },
          "401": {
            "description": "Authorization failed.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Authorization token has no access to trading-account-management-api:rest:public:mt-server-management:updateProvisioningProfile method.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Provisioning profile not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unexpected application error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "Removes provisioning profile",
        "description": "Removes provisioning profile. Requires access to trading-account-management-api:rest:public:mt-server-management:deleteProvisioningProfile method which is included into writer role. Requires access to mt-server, mt-manager resources.",
        "x-authorization": {
          "method": "trading-account-management-api:rest:public:mt-server-management:deleteProvisioningProfile",
          "roles": [
            "writer"
          ],
          "resources": [
            "mt-server",
            "mt-manager"
          ]
        },
        "parameters": [
          {
            "name": "auth-token",
            "description": "Authorization token",
            "type": "string",
            "in": "header",
            "required": true
          },
          {
            "name": "id",
            "description": "Id of the provisioning profile to be deleted",
            "type": "string",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Provisioning profile with specified id has been deleted"
          },
          "400": {
            "description": "Unable to delete provisioning profile because there are accounts in use",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Authorization failed.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Authorization token has no access to trading-account-management-api:rest:public:mt-server-management:deleteProvisioningProfile method.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Provisioning profile with specified id was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unexpected application error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/provisioning-profiles/{id}": {
      "get": {
        "summary": "Returns provisioning profile info by id",
        "description": "Returns provisioning profile info by profile id Requires provisioning.admin permission. Requires access to trading-account-management-api:rest:private:default:getProvisioningProfileInfo method. Requires access to mt-server, mt-manager resources.",
        "x-authorization": {
          "method": "trading-account-management-api:rest:private:default:getProvisioningProfileInfo",
          "resources": [
            "mt-server",
            "mt-manager"
          ]
        },
        "parameters": [
          {
            "name": "auth-token",
            "description": "Authorization token",
            "type": "string",
            "in": "header",
            "required": true
          },
          {
            "name": "id",
            "description": "Id of the provisioning profile",
            "type": "string",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Provisioning profile returned",
            "schema": {
              "$ref": "#/definitions/ProvisioningProfile"
            }
          },
          "401": {
            "description": "Authorization failed.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Authorization token has no access to trading-account-management-api:rest:private:default:getProvisioningProfileInfo method.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Provisioning profile not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unexpected application error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/manager-api-profile/{id}/approve": {
      "put": {
        "summary": "Approve manager api profile",
        "description": "Approve manager api profile. Requires access to trading-account-management-api:rest:private:default:approveManagerApiProfile method. Requires access to mt-manager resource.",
        "x-authorization": {
          "method": "trading-account-management-api:rest:private:default:approveManagerApiProfile",
          "resources": [
            "mt-manager"
          ]
        },
        "parameters": [
          {
            "name": "auth-token",
            "description": "Authorization token",
            "type": "string",
            "in": "header",
            "required": true
          },
          {
            "name": "id",
            "description": "Id of the manager api profile",
            "type": "string",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Manager api approved successfully"
          },
          "401": {
            "description": "Authorization failed.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Authorization token has no access to trading-account-management-api:rest:private:default:approveManagerApiProfile method.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Manager api profile not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unexpected application error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/users/current/accounts/{accountId}/replicas": {
      "get": {
        "summary": "Returns replicas for a trading account",
        "description": "Returns replicas for a trading account. Requires access to trading-account-management-api:rest:public:account-management:getAccountReplicas method which is included into reader role. Requires access to account resource.",
        "x-authorization": {
          "method": "trading-account-management-api:rest:public:account-management:getAccountReplicas",
          "roles": [
            "reader"
          ],
          "resources": [
            "account"
          ]
        },
        "parameters": [
          {
            "name": "auth-token",
            "description": "Authorization token",
            "type": "string",
            "in": "header",
            "required": true
          },
          {
            "name": "accountId",
            "description": "Primary account id",
            "type": "string",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "MetaTrader account replicas returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MetaTraderAccountReplica"
              },
              "uniqueItems": true
            }
          },
          "400": {
            "description": "Validation failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Authorization failed.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Authorization token has no access to trading-account-management-api:rest:public:account-management:getAccountReplicas method.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Primary account not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unexpected application error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Creates a trading account replica",
        "description": "Creates a trading account replica in a region different from trading account region and starts a cloud API server for it. It can take some time for the API server and trading terminal to start and connect to broker. You can use the `connectionStatus` replica field to monitor the current status of the replica. Requires access to trading-account-management-api:rest:public:account-management:getAccountReplicas method which is included into writer role. Requires access to account resource.",
        "x-authorization": {
          "method": "trading-account-management-api:rest:public:account-management:getAccountReplicas",
          "roles": [
            "writer"
          ],
          "resources": [
            "account"
          ]
        },
        "parameters": [
          {
            "name": "auth-token",
            "description": "Authorization token",
            "in": "header",
            "type": "string",
            "required": true
          },
          {
            "name": "accountId",
            "description": "Primary account id",
            "type": "string",
            "in": "path",
            "required": true
          },
          {
            "name": "account",
            "description": "MetaTrader account data",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/NewMetaTraderAccountReplica"
            },
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "New MetaTrader account replica created successfully",
            "schema": {
              "$ref": "#/definitions/MetatraderAccountIdAndState"
            }
          },
          "202": {
            "description": "Server settings detection in progress",
            "schema": {
              "$ref": "#/definitions/RetryLaterMessage"
            }
          },
          "400": {
            "description": "Validation failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Authorization failed.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Authorization token has no access to trading-account-management-api:rest:public:account-management:getAccountReplicas method.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Provisioning profile with specified id not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unexpected application error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/users/current/accounts": {
      "get": {
        "summary": "Returns trading accounts",
        "description": "Returns trading accounts belonging to the current user. Requires access to trading-account-management-api:rest:public:account-management:getAccounts method which is included into reader role. Requires access to account resource.",
        "x-authorization": {
          "method": "trading-account-management-api:rest:public:account-management:getAccounts",
          "roles": [
            "reader"
          ],
          "resources": [
            "account"
          ]
        },
        "parameters": [
          {
            "name": "auth-token",
            "description": "Authorization token",
            "type": "string",
            "in": "header",
            "required": true
          },
          {
            "name": "offset",
            "description": "accounts search offset (defaults to 0) (must be greater or equal to 0)",
            "in": "query",
            "default": 0,
            "required": false,
            "type": "number"
          },
          {
            "name": "limit",
            "description": "accounts search limit (defaults to 1000) (must be greater or equal to 1 and less or equal to 1000)",
            "in": "query",
            "default": 1000,
            "required": false,
            "type": "number"
          },
          {
            "in": "query",
            "name": "version",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "enum": [
              "4",
              "5"
            ],
            "description": "MT version",
            "required": false
          },
          {
            "name": "endpointVersion",
            "description": "Response format version",
            "in": "query",
            "type": "string",
            "enum": [
              "v1",
              "v2"
            ],
            "default": "v1",
            "required": false
          },
          {
            "name": "copyFactoryRoles",
            "description": "Account roles for CopyFactory2 API",
            "in": "query",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "enum": [
              "PROVIDER",
              "SUBSCRIBER"
            ],
            "required": false
          },
          {
            "name": "sortOrder",
            "description": "Sort order for stateChangedAt field, default is no order",
            "in": "query",
            "type": "string",
            "enum": [
              "asc",
              "desc"
            ],
            "required": false
          },
          {
            "in": "query",
            "name": "type",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "enum": [
              "cloud-g1",
              "cloud-g2"
            ],
            "description": "account type",
            "required": false
          },
          {
            "in": "query",
            "name": "state",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "enum": [
              "CREATED",
              "DEPLOYING",
              "DEPLOYED",
              "DEPLOY_FAILED",
              "UNDEPLOYING",
              "UNDEPLOYED",
              "UNDEPLOY_FAILED",
              "DELETING",
              "DELETE_FAILED",
              "REDEPLOY_FAILED"
            ],
            "description": "account state",
            "required": false
          },
          {
            "in": "query",
            "name": "connectionStatus",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "enum": [
              "CONNECTED",
              "DISCONNECTED",
              "DISCONNECTED_FROM_BROKER"
            ],
            "description": "connection status",
            "required": false
          },
          {
            "in": "query",
            "name": "query",
            "type": "string",
            "description": "searches over _id, name, server and login to match query",
            "required": false
          },
          {
            "in": "query",
            "name": "region",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "enum": [
              "vint-hill",
              "new-york",
              "london",
              "singapore"
            ],
            "description": "Available region",
            "required": false
          },
          {
            "name": "provisioningProfileId",
            "description": "Describes which provisioning profile the account belongs to",
            "type": "string",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "MetaTrader accounts returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MetaTraderAccount"
              },
              "uniqueItems": true
            }
          },
          "400": {
            "description": "Validation failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Authorization failed.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Authorization token has no access to trading-account-management-api:rest:public:account-management:getAccounts method.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unexpected application error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Adds a trading account",
        "description": "Adds a trading account and starts a cloud API server for the trading account. It can take some time for the API server and trading terminal to start and connect to broker. You can use the `connectionStatus` replica field to monitor the current status of the trading account. Requires access to trading-account-management-api:rest:public:account-management:createAccount method which is included into writer role. Requires access to mt-server resource.",
        "x-authorization": {
          "method": "trading-account-management-api:rest:public:account-management:createAccount",
          "roles": [
            "writer"
          ],
          "resources": [
            "mt-server"
          ]
        },
        "parameters": [
          {
            "name": "auth-token",
            "description": "Authorization token",
            "in": "header",
            "type": "string",
            "required": true
          },
          {
            "name": "account",
            "description": "MetaTrader account data",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/NewMetaTraderAccount"
            },
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "New MetaTrader account created successfully",
            "schema": {
              "$ref": "#/definitions/MetatraderAccountIdAndState"
            }
          },
          "202": {
            "description": "Server settings detection in progress",
            "schema": {
              "$ref": "#/definitions/RetryLaterMessage"
            }
          },
          "400": {
            "description": "Validation failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Authorization failed.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Authorization token has no access to trading-account-management-api:rest:public:account-management:createAccount method.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Provisioning profile with specified id not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unexpected application error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/users/current/accounts/{accountId}/examples/{platform}": {
      "get": {
        "summary": "Generates code sample for account",
        "description": "Generates code sample for account. Returns a zip file with example. Requires access to trading-account-management-api:rest:example-generator:default:generateExample method which is included into reader role. Requires access to account resource.",
        "x-authorization": {
          "method": "trading-account-management-api:rest:example-generator:default:generateExample",
          "roles": [
            "reader"
          ],
          "resources": [
            "account"
          ]
        },
        "produces": [
          "application/zip"
        ],
        "parameters": [
          {
            "name": "auth-token",
            "description": "Authorization token",
            "type": "string",
            "in": "header",
            "required": true
          },
          {
            "name": "accountId",
            "description": "MetaTrader account id",
            "type": "string",
            "required": true,
            "in": "path"
          },
          {
            "name": "platform",
            "description": "platform for which code will be generated",
            "type": "string",
            "required": true,
            "in": "path",
            "enum": [
              "node",
              "python",
              "browser",
              "java"
            ]
          },
          {
            "name": "exampleType",
            "description": "Example type",
            "type": "string",
            "in": "query",
            "enum": [
              "rpc",
              "streaming"
            ],
            "default": "streaming"
          }
        ],
        "responses": {
          "200": {
            "description": "Code sample zip returned",
            "schema": {
              "type": "file"
            }
          },
          "400": {
            "description": "Validation failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Authorization failed.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Authorization token has no access to trading-account-management-api:rest:example-generator:default:generateExample method.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "MetaTrader account not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unexpected application error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/users/current/accounts/copyfactory2-example": {
      "get": {
        "summary": "Generates CopyFactory 2 code sample",
        "description": "Generates CopyFactory 2 code sample. Returns a zip file with example. Requires access to trading-account-management-api:rest:example-generator:default:generateCopyFactory2Example method which is included into reader role. Requires access to account resource.",
        "produces": [
          "application/zip"
        ],
        "x-authorization": {
          "method": "trading-account-management-api:rest:example-generator:default:generateCopyFactory2Example",
          "roles": [
            "reader"
          ],
          "resources": [
            "account"
          ]
        },
        "parameters": [
          {
            "name": "auth-token",
            "description": "Authorization token",
            "type": "string",
            "in": "header",
            "required": true
          },
          {
            "name": "slaveAccountId",
            "description": "Slave MetaTrader account id",
            "type": "string",
            "required": true,
            "in": "query"
          },
          {
            "name": "masterAccountId",
            "description": "Master MetaTrader account id",
            "type": "string",
            "required": true,
            "in": "query"
          },
          {
            "name": "platform",
            "description": "platform for which code will be generated",
            "type": "string",
            "required": true,
            "in": "query",
            "enum": [
              "javascript",
              "python"
            ]
          },
          {
            "name": "type",
            "description": "type of example which will be generated",
            "type": "string",
            "required": true,
            "in": "query",
            "enum": [
              "copytrade",
              "externalSignal"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Code sample zip returned",
            "schema": {
              "type": "file"
            }
          },
          "400": {
            "description": "Validation failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Authorization failed.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Authorization token has no access to trading-account-management-api:rest:example-generator:default:generateCopyFactory2Example method.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "MetaTrader account not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unexpected application error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/users/current/accounts/metastats-example": {
      "get": {
        "summary": "Generates Metastats code sample",
        "description": "Generates Metastats code sample. Returns a zip file with example. Requires access to trading-account-management-api:rest:example-generator:default:generateMetastatsExample method which is included into reader role. Requires access to account resource.",
        "x-authorization": {
          "method": "trading-account-management-api:rest:example-generator:default:generateMetastatsExample",
          "roles": [
            "reader"
          ],
          "resources": [
            "account"
          ]
        },
        "produces": [
          "application/zip"
        ],
        "parameters": [
          {
            "name": "auth-token",
            "description": "Authorization token",
            "type": "string",
            "in": "header",
            "required": true
          },
          {
            "name": "accountId",
            "description": "MetaTrader account id",
            "type": "string",
            "required": true,
            "in": "query"
          },
          {
            "name": "platform",
            "description": "platform for which code will be generated",
            "type": "string",
            "required": true,
            "in": "query",
            "enum": [
              "javascript",
              "python",
              "java"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Code sample zip returned",
            "schema": {
              "type": "file"
            }
          },
          "400": {
            "description": "Validation failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Authorization failed.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Authorization token has no access to trading-account-management-api:rest:example-generator:default:generateMetastatsExample method.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "MetaTrader account not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unexpected application error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/users/current/accounts/risk-management-example": {
      "get": {
        "summary": "Generates risk management code sample",
        "description": "Generates risk management code sample. Returns a zip file with example. Requires access to trading-account-management-api:rest:example-generator:default:generateRiskManagementExample method which is included into reader role. Requires access to account resource.",
        "x-authorization": {
          "method": "trading-account-management-api:rest:example-generator:default:generateRiskManagementExample",
          "roles": [
            "reader"
          ],
          "resources": [
            "account"
          ]
        },
        "produces": [
          "application/zip"
        ],
        "parameters": [
          {
            "name": "auth-token",
            "description": "Authorization token",
            "type": "string",
            "in": "header",
            "required": true
          },
          {
            "name": "accountId",
            "description": "MetaTrader account id",
            "type": "string",
            "required": true,
            "in": "query"
          },
          {
            "name": "platform",
            "description": "platform for which code will be generated",
            "type": "string",
            "required": true,
            "in": "query",
            "enum": [
              "javascript",
              "python"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Code sample zip returned",
            "schema": {
              "type": "file"
            }
          },
          "400": {
            "description": "Validation failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Authorization failed.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Authorization token has no access to trading-account-management-api:rest:example-generator:default:generateRiskManagementExample method.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "MetaTrader account not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unexpected application error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/users/current/accounts/{accountId}": {
      "get": {
        "summary": "Returns trading account by id",
        "description": "Returns trading account by id. Requires access to trading-account-management-api:rest:public:account-management:getAccount method which is included into reader role. Requires access to account resource.",
        "x-authorization": {
          "method": "trading-account-management-api:rest:public:account-management:getAccount",
          "roles": [
            "reader"
          ],
          "resources": [
            "account"
          ]
        },
        "parameters": [
          {
            "name": "auth-token",
            "description": "Authorization token or MetaApi account access token",
            "type": "string",
            "in": "header",
            "required": true
          },
          {
            "name": "accountId",
            "description": "MetaTrader account id",
            "type": "string",
            "required": true,
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "MetaTrader account returned",
            "schema": {
              "$ref": "#/definitions/MetaTraderAccount"
            }
          },
          "401": {
            "description": "Authorization failed.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Authorization token has no access to trading-account-management-api:rest:public:account-management:getAccount method.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "MetaTrader account not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unexpected application error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "summary": "Updates trading account",
        "description": "Updates trading account. Please redeploy the trading account in order for updated settings to take effect. Requires access to trading-account-management-api:rest:public:account-management:updateAccount method which is included into writer role. Requires access to account resource.",
        "x-authorization": {
          "method": "trading-account-management-api:rest:public:account-management:updateAccount",
          "roles": [
            "writer"
          ],
          "resources": [
            "account"
          ]
        },
        "parameters": [
          {
            "name": "auth-token",
            "description": "Authorization token",
            "type": "string",
            "in": "header",
            "required": true
          },
          {
            "name": "accountId",
            "description": "MetaTrader account id",
            "type": "string",
            "required": true,
            "in": "path"
          },
          {
            "name": "metatraderAccount",
            "description": "Updated account information",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdatedMetatraderAccount"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "MetaTrader account updated"
          },
          "400": {
            "description": "Validation failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Authorization failed.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Authorization token has no access to trading-account-management-api:rest:public:account-management:updateAccount method.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "MetaTrader account not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unexpected application error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "Removes a trading account",
        "description": "Removes a trading account and stops the API server serving the account. The account state such as downloaded market data history will be removed as well when you remove the account. Requires access to trading-account-management-api:rest:public:account-management:removeAccount method which is included into writer role. Requires access to account resource.",
        "x-authorization": {
          "method": "trading-account-management-api:rest:public:account-management:removeAccount",
          "roles": [
            "writer"
          ],
          "resources": [
            "account"
          ]
        },
        "parameters": [
          {
            "name": "auth-token",
            "description": "Authorization token",
            "type": "string",
            "in": "header",
            "required": true
          },
          {
            "name": "accountId",
            "description": "Id of the account to be deleted",
            "type": "string",
            "in": "path",
            "required": true
          },
          {
            "name": "executeForAllReplicas",
            "description": "If true, all replicas will be deleted",
            "type": "boolean",
            "in": "query",
            "default": false,
            "required": false
          }
        ],
        "responses": {
          "204": {
            "description": "MetaTrader account with specified id has been deleted."
          },
          "401": {
            "description": "Authorization failed.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Authorization token has no access to trading-account-management-api:rest:public:account-management:removeAccount method.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Account with specified id was not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unexpected application error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/users/current/accounts/{accountId}/replicas/{replicaId}": {
      "get": {
        "summary": "Returns trading account replica by trading account id and replica id",
        "description": "Returns trading account replica by trading account id and replica id. Requires access to trading-account-management-api:rest:public:account-management:getAccountReplica method which is included into reader role. Requires access to account resource.",
        "x-authorization": {
          "method": "trading-account-management-api:rest:public:account-management:getAccountReplica",
          "roles": [
            "reader"
          ],
          "resources": [
            "account"
          ]
        },
        "parameters": [
          {
            "name": "auth-token",
            "description": "Authorization token",
            "type": "string",
            "in": "header",
            "required": true
          },
          {
            "name": "accountId",
            "description": "MetaTrader primary account id",
            "type": "string",
            "required": true,
            "in": "path"
          },
          {
            "name": "replicaId",
            "description": "MetaTrader account replica id",
            "type": "string",
            "required": true,
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "MetaTrader account replica returned",
            "schema": {
              "$ref": "#/definitions/MetaTraderAccountReplica"
            }
          },
          "401": {
            "description": "Authorization failed.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Authorization token has no access to trading-account-management-api:rest:public:account-management:getAccountReplica method.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "MetaTrader account replica not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unexpected application error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "summary": "Updates trading account replica",
        "description": "Updates trading account replica. Requires access to trading-account-management-api:rest:public:account-management:updateAccountReplica method which is included into writer role. Requires access to account resource.",
        "x-authorization": {
          "method": "trading-account-management-api:rest:public:account-management:updateAccountReplica",
          "roles": [
            "writer"
          ],
          "resources": [
            "account"
          ]
        },
        "parameters": [
          {
            "name": "auth-token",
            "description": "Authorization token",
            "type": "string",
            "in": "header",
            "required": true
          },
          {
            "name": "accountId",
            "description": "MetaTrader account primary id",
            "type": "string",
            "required": true,
            "in": "path"
          },
          {
            "name": "replicaId",
            "description": "MetaTrader account replica id",
            "type": "string",
            "required": true,
            "in": "path"
          },
          {
            "name": "metatraderAccount",
            "description": "Updated account replica information",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdatedMetatraderAccountReplica"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "MetaTrader account replica updated"
          },
          "401": {
            "description": "Authorization failed.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Authorization token has no access to trading-account-management-api:rest:public:account-management:updateAccountReplica method.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "MetaTrader account not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unexpected application error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "Removes trading account replica",
        "description": "Removes a trading account replica and stops the API server serving the replica. Requires access to trading-account-management-api:rest:public:account-management:removeAccountReplica method which is included into writer role. Requires access to account resource.",
        "x-authorization": {
          "method": "trading-account-management-api:rest:public:account-management:removeAccountReplica",
          "roles": [
            "writer"
          ],
          "resources": [
            "account"
          ]
        },
        "parameters": [
          {
            "name": "auth-token",
            "description": "Authorization token",
            "type": "string",
            "in": "header",
            "required": true
          },
          {
            "name": "accountId",
            "description": "Primary account id",
            "type": "string",
            "in": "path",
            "required": true
          },
          {
            "name": "replicaId",
            "description": "Id of the account replica to be deleted",
            "type": "string",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "MetaTrader account replica with specified id has been deleted."
          },
          "401": {
            "description": "Authorization failed.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Authorization token has no access to trading-account-management-api:rest:public:account-management:removeAccountReplica method.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Account with specified id was not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unexpected application error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/accounts/{accountId}": {
      "get": {
        "summary": "Returns account info by id",
        "description": "Returns Trading account info by account id. Requires access to trading-account-management-api:rest:private:default:getAccountInfo method. Requires access to account resource.",
        "x-authorization": {
          "method": "trading-account-management-api:rest:private:default:getAccountInfo",
          "resources": [
            "account"
          ]
        },
        "parameters": [
          {
            "name": "auth-token",
            "description": "Authorization token",
            "type": "string",
            "in": "header",
            "required": true
          },
          {
            "name": "accountId",
            "description": "MetaTrader account id",
            "type": "string",
            "required": true,
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "MetaTrader account returned",
            "schema": {
              "$ref": "#/definitions/MetaTraderAccountInfo"
            }
          },
          "401": {
            "description": "Authorization failed.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Authorization token has no access to trading-account-management-api:rest:private:default:getAccountInfo method.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "MetaTrader account not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unexpected application error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/metastats/accounts/{accountId}": {
      "get": {
        "summary": "Returns trading account info by account id",
        "description": "Returns trading account info by account id for metastats. Requires access to trading-account-management-api:rest:private:default:getAccountByIdAndToken method. Requires access to account resource.",
        "x-authorization": {
          "method": "trading-account-management-api:rest:private:default:getAccountByIdAndToken",
          "resources": [
            "account"
          ]
        },
        "parameters": [
          {
            "name": "auth-token",
            "description": "Authorization token",
            "type": "string",
            "in": "header",
            "required": true
          },
          {
            "name": "accountId",
            "description": "MetaTrader account id",
            "type": "string",
            "required": true,
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "MetaTrader account returned",
            "schema": {
              "$ref": "#/definitions/MetastatsAccountInfo"
            }
          },
          "401": {
            "description": "Authorization failed.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Authorization token has no access to trading-account-management-api:rest:private:default:getAccountByIdAndToken method.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "MetaTrader account not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unexpected application error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/users/current/accounts/accessToken/{accessToken}": {
      "get": {
        "summary": "Returns trading account by access token",
        "description": "Returns trading account by access token. Returns primary account if account replicas with same token exists",
        "x-authorization": {
          "custom": true
        },
        "parameters": [
          {
            "name": "accessToken",
            "description": "MetaTrader account access token",
            "type": "string",
            "required": true,
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "MetaTrader account returned",
            "schema": {
              "$ref": "#/definitions/MetaTraderAccount"
            }
          },
          "401": {
            "description": "Authorization failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "MetaTrader account not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unexpected application error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/users/current/accounts/{accountId}/increase-reliability": {
      "post": {
        "summary": "Increases trading account reliability",
        "description": "Increases trading account reliability in order to increase the expected account uptime. The account will be temporary stopped to perform this action. Note that increasing reliability is a paid option. Requires access to trading-account-management-api:rest:public:account-management:increaseReliability method which is included into writer role. Requires access to account resource.",
        "x-authorization": {
          "method": "trading-account-management-api:rest:public:account-management:increaseReliability",
          "roles": [
            "writer"
          ],
          "resources": [
            "account"
          ]
        },
        "parameters": [
          {
            "name": "auth-token",
            "description": "Authorization token",
            "type": "string",
            "in": "header",
            "required": true
          },
          {
            "name": "accountId",
            "description": "MetaTrader account id",
            "type": "string",
            "required": true,
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Account reliability increased"
          },
          "401": {
            "description": "Authorization failed.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Authorization token has no access to trading-account-management-api:rest:public:account-management:increaseReliability method.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "MetaTrader account not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unexpected application error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/users/current/accounts/{accountId}/enable-risk-management-api": {
      "post": {
        "summary": "Enables risk management API for trading account",
        "description": "Enables risk management API for trading account. The account will be temporary stopped to perform this action. Note that risk management API is a paid option. Requires access to trading-account-management-api:rest:public:account-management:enableRiskManagementApi method which is included into writer role. Requires access to account resource.",
        "x-authorization": {
          "method": "trading-account-management-api:rest:public:account-management:enableRiskManagementApi",
          "roles": [
            "writer"
          ],
          "resources": [
            "account"
          ]
        },
        "parameters": [
          {
            "name": "auth-token",
            "description": "Authorization token",
            "type": "string",
            "in": "header",
            "required": true
          },
          {
            "name": "accountId",
            "description": "MetaTrader account id",
            "type": "string",
            "required": true,
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Risk management api enabled for account"
          },
          "401": {
            "description": "Authorization failed.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Authorization token has no access to trading-account-management-api:rest:public:account-management:enableRiskManagementApi method.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "MetaTrader account not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unexpected application error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/users/current/accounts/{accountId}/enable-metastats-hourly-tarification": {
      "post": {
        "summary": "Enables MetaStats hourly tarification for trading account",
        "description": "Enables MetaStats hourly tarification for trading account. The account will be temporary stopped to perform this action. Note that this is a paid option. Requires access to trading-account-management-api:rest:public:account-management:enableMetaStatsHourlyTarification method which is included into writer role. Requires access to account resource.",
        "x-authorization": {
          "method": "trading-account-management-api:rest:public:account-management:enableMetaStatsHourlyTarification",
          "roles": [
            "writer"
          ],
          "resources": [
            "account"
          ]
        },
        "parameters": [
          {
            "name": "auth-token",
            "description": "Authorization token",
            "type": "string",
            "in": "header",
            "required": true
          },
          {
            "name": "accountId",
            "description": "MetaTrader account id",
            "type": "string",
            "required": true,
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "MetaStats hourly tarification enabled for account"
          },
          "401": {
            "description": "Authorization failed.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Authorization token has no access to trading-account-management-api:rest:public:account-management:enableMetaStatsHourlyTarification method.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "MetaTrader account not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unexpected application error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/rotate-account-access-tokens": {
      "post": {
        "summary": "Replaces access token for all accounts",
        "description": "Creates a new access token for accounts. The old access tokens will be available for some time. Requires access to trading-account-management-api:rest:private:default:updateAccessToken method. Requires access to account resource.",
        "x-authorization": {
          "method": "trading-account-management-api:rest:private:default:updateAccessToken",
          "resources": [
            "account"
          ]
        },
        "parameters": [
          {
            "name": "auth-token",
            "description": "Authorization token",
            "type": "string",
            "in": "header",
            "required": true
          },
          {
            "name": "ttl",
            "description": "Lifetime of old tokens in days",
            "type": "string",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "MetaTrader account access tokens successfully updated"
          },
          "401": {
            "description": "Authorization failed.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Authorization token has no access to trading-account-management-api:rest:private:default:updateAccessToken method.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unexpected application error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/users/current/accounts/{accountId}/undeploy": {
      "post": {
        "summary": "Undeploys trading account",
        "description": "Stops API server and trading terminal for trading account. This request will be ignored if trading account is already undeployed. Requires access to trading-account-management-api:rest:public:account-management:undeployAccount method which is included into writer role. Requires access to account resource.",
        "x-authorization": {
          "method": "trading-account-management-api:rest:public:account-management:undeployAccount",
          "roles": [
            "writer"
          ],
          "resources": [
            "account"
          ]
        },
        "parameters": [
          {
            "name": "auth-token",
            "description": "Authorization token",
            "in": "header",
            "type": "string",
            "required": true
          },
          {
            "name": "accountId",
            "description": "MetaTrader account id",
            "type": "string",
            "in": "path",
            "required": true
          },
          {
            "name": "executeForAllReplicas",
            "description": "If true, current operation will be executed for all replicas",
            "type": "boolean",
            "in": "query",
            "default": true,
            "required": false
          }
        ],
        "responses": {
          "204": {
            "description": "MetaTrader account was successfully undeployed"
          },
          "401": {
            "description": "Authorization failed.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Authorization token has no access to trading-account-management-api:rest:public:account-management:undeployAccount method.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "MetaTrader account with specified id not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unexpected application error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/users/current/accounts/{accountId}/replicas/{replicaId}/undeploy": {
      "post": {
        "summary": "Undeploys trading account replica",
        "description": "Stops API server and trading terminal for trading account replica. The request will be ignored if trading account replica is already undeployed. Requires access to trading-account-management-api:rest:public:account-management:undeployAccountReplica method which is included into writer role. Requires access to account resource.",
        "x-authorization": {
          "method": "trading-account-management-api:rest:public:account-management:undeployAccountReplica",
          "roles": [
            "writer"
          ],
          "resources": [
            "account"
          ]
        },
        "parameters": [
          {
            "name": "auth-token",
            "description": "Authorization token",
            "in": "header",
            "type": "string",
            "required": true
          },
          {
            "name": "accountId",
            "description": "MetaTrader account id",
            "type": "string",
            "in": "path",
            "required": true
          },
          {
            "name": "replicaId",
            "description": "MetaTrader account replica id",
            "type": "string",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "MetaTrader account replica was successfully undeployed"
          },
          "401": {
            "description": "Authorization failed.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Authorization token has no access to trading-account-management-api:rest:public:account-management:undeployAccountReplica method.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "MetaTrader account with specified id not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unexpected application error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/users/current/accounts/{accountId}/deploy": {
      "post": {
        "summary": "Deploys trading account",
        "description": "Starts API server and trading terminal for trading account. This request will be ignored if the account is already deployed. Requires access to trading-account-management-api:rest:public:account-management:deployAccount method which is included into writer role. Requires access to account resource.",
        "x-authorization": {
          "method": "trading-account-management-api:rest:public:account-management:deployAccount",
          "roles": [
            "writer"
          ],
          "resources": [
            "account"
          ]
        },
        "parameters": [
          {
            "name": "auth-token",
            "description": "Authorization token",
            "in": "header",
            "type": "string",
            "required": true
          },
          {
            "name": "accountId",
            "description": "MetaTrader account id",
            "type": "string",
            "in": "path",
            "required": true
          },
          {
            "name": "executeForAllReplicas",
            "description": "If true, current operation will be executed for all replicas",
            "type": "boolean",
            "in": "query",
            "default": true,
            "required": false
          }
        ],
        "responses": {
          "204": {
            "description": "MetaTrader account was successfully deployed"
          },
          "401": {
            "description": "Authorization failed.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Authorization token has no access to trading-account-management-api:rest:public:account-management:deployAccount method.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "MetaTrader account with specified id not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unexpected application error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/users/current/accounts/{accountId}/replicas/{replicaId}/deploy": {
      "post": {
        "summary": "Deploys trading account replica",
        "description": "Starts API server and trading terminal for trading account replica. This request will be ignored if the replica is already deployed. Requires access to trading-account-management-api:rest:public:account-management:deployAccountReplica method which is included into writer role. Requires access to account resource.",
        "x-authorization": {
          "method": "trading-account-management-api:rest:public:account-management:deployAccountReplica",
          "roles": [
            "writer"
          ],
          "resources": [
            "account"
          ]
        },
        "parameters": [
          {
            "name": "auth-token",
            "description": "Authorization token",
            "in": "header",
            "type": "string",
            "required": true
          },
          {
            "name": "accountId",
            "description": "MetaTrader account id",
            "type": "string",
            "in": "path",
            "required": true
          },
          {
            "name": "replicaId",
            "description": "MetaTrader account replica id",
            "type": "string",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "MetaTrader account replica was successfully deployed"
          },
          "401": {
            "description": "Authorization failed.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Authorization token has no access to trading-account-management-api:rest:public:account-management:deployAccountReplica method.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "MetaTrader account with specified id not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unexpected application error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/users/current/accounts/{accountId}/redeploy": {
      "post": {
        "summary": "Redeploys trading account",
        "description": "Redeploys trading account. This is equivalent to undeploy immediately followed by deploy. Requires access to trading-account-management-api:rest:public:account-management:redeployAccount method which is included into writer role. Requires access to account resource.",
        "x-authorization": {
          "method": "trading-account-management-api:rest:public:account-management:redeployAccount",
          "roles": [
            "writer"
          ],
          "resources": [
            "account"
          ]
        },
        "parameters": [
          {
            "name": "auth-token",
            "description": "Authorization token",
            "in": "header",
            "type": "string",
            "required": true
          },
          {
            "name": "accountId",
            "description": "MetaTrader account id",
            "type": "string",
            "in": "path",
            "required": true
          },
          {
            "name": "executeForAllReplicas",
            "description": "If true, current operation will be executed for all replicas",
            "type": "boolean",
            "in": "query",
            "default": true,
            "required": false
          }
        ],
        "responses": {
          "204": {
            "description": "MetaTrader account was successfully redeployed"
          },
          "401": {
            "description": "Authorization failed.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Authorization token has no access to trading-account-management-api:rest:public:account-management:redeployAccount method.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "MetaTrader account with specified id not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unexpected application error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/users/current/accounts/{accountId}/replicas/{replicaId}/redeploy": {
      "post": {
        "summary": "Redeploys trading account replica",
        "description": "Redeploys trading account replica. This is equivalent to undeploy immediately followed by deploy. Requires access to trading-account-management-api:rest:public:account-management:redeployAccountReplica method which is included into writer role. Requires access to account resource.",
        "x-authorization": {
          "method": "trading-account-management-api:rest:public:account-management:redeployAccountReplica",
          "roles": [
            "writer"
          ],
          "resources": [
            "account"
          ]
        },
        "parameters": [
          {
            "name": "auth-token",
            "description": "Authorization token",
            "in": "header",
            "type": "string",
            "required": true
          },
          {
            "name": "accountId",
            "description": "MetaTrader account id",
            "type": "string",
            "in": "path",
            "required": true
          },
          {
            "name": "replicaId",
            "description": "MetaTrader account replica id",
            "type": "string",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "MetaTrader account replica was successfully redeployed"
          },
          "401": {
            "description": "Authorization failed.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Authorization token has no access to trading-account-management-api:rest:public:account-management:redeployAccountReplica method.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "MetaTrader account with specified id not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unexpected application error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/users/current/accounts/{accountId}/expert-advisors": {
      "get": {
        "summary": "Returns expert advisors",
        "description": "Returns expert advisors belonging account with the specified id. Requires ea.manage permission for MT5 account. Requires access to trading-account-management-api:rest:public:ea:getExpertAdvisors method which is included into reader role.",
        "x-authorization": {
          "method": "trading-account-management-api:rest:public:ea:getExpertAdvisors",
          "roles": [
            "reader"
          ]
        },
        "parameters": [
          {
            "name": "auth-token",
            "description": "Authorization token",
            "in": "header",
            "type": "string",
            "required": true
          },
          {
            "name": "accountId",
            "description": "MetaTrader account id",
            "type": "string",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Expert advisors returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExpertAdvisor"
              }
            }
          },
          "401": {
            "description": "Authorization failed.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Authorization token has no access to trading-account-management-api:rest:public:ea:getExpertAdvisors method.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "MetaTrader account with specified id not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unexpected application error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/users/current/accounts/{accountId}/expert-advisors/{expertId}": {
      "get": {
        "summary": "Returns expert advisor",
        "description": "Returns expert advisor with specified id. Requires access to trading-account-management-api:rest:public:ea:getExpertAdvisor method which is included into reader role.",
        "x-authorization": {
          "method": "trading-account-management-api:rest:public:ea:getExpertAdvisor",
          "roles": [
            "reader"
          ]
        },
        "parameters": [
          {
            "name": "auth-token",
            "description": "Authorization token",
            "in": "header",
            "type": "string",
            "required": true
          },
          {
            "name": "accountId",
            "description": "MetaTrader account id",
            "type": "string",
            "in": "path",
            "required": true
          },
          {
            "name": "expertId",
            "description": "Expert advisor id",
            "type": "string",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Expert advisor returned",
            "schema": {
              "$ref": "#/definitions/ExpertAdvisor"
            }
          },
          "401": {
            "description": "Authorization failed.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Authorization token has no access to trading-account-management-api:rest:public:ea:getExpertAdvisor method.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "MetaTrader account or expert advisor with specified id not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unexpected application error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "summary": "Updates expert advisor",
        "description": "Updates expert advisor with specified id. Requires ea.manage permission for MT5 account. Requires access to trading-account-management-api:rest:public:ea:updateExpertAdvisor method which is included into writer role.",
        "x-authorization": {
          "method": "trading-account-management-api:rest:public:ea:updateExpertAdvisor",
          "roles": [
            "writer"
          ]
        },
        "parameters": [
          {
            "name": "auth-token",
            "description": "Authorization token",
            "in": "header",
            "type": "string",
            "required": true
          },
          {
            "name": "accountId",
            "description": "MetaTrader account id",
            "type": "string",
            "in": "path",
            "required": true
          },
          {
            "name": "expertId",
            "description": "Expert advisor id",
            "type": "string",
            "in": "path",
            "required": true
          },
          {
            "name": "expertAdvisor",
            "description": "Updated expert advisor data",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/NewExpertAdvisor"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Expert advisor updated"
          },
          "400": {
            "description": "Validation failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Authorization failed.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Authorization token has no access to trading-account-management-api:rest:public:ea:updateExpertAdvisor method.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "MetaTrader account with specified id not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unexpected application error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "Removes expert advisor",
        "description": "Removes expert advisor with specified id. Requires ea.manage permission for MT5 account. Requires access to trading-account-management-api:rest:public:ea:removeExpertAdvisor method which is included into writer role.",
        "x-authorization": {
          "method": "trading-account-management-api:rest:public:ea:removeExpertAdvisor",
          "roles": [
            "writer"
          ]
        },
        "parameters": [
          {
            "name": "auth-token",
            "description": "Authorization token",
            "in": "header",
            "type": "string",
            "required": true
          },
          {
            "name": "accountId",
            "description": "MetaTrader account id",
            "type": "string",
            "in": "path",
            "required": true
          },
          {
            "name": "expertId",
            "description": "Expert advisor id",
            "type": "string",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Expert advisor deleted"
          },
          "401": {
            "description": "Authorization failed.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Authorization token has no access to trading-account-management-api:rest:public:ea:removeExpertAdvisor method.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "MetaTrader account or expert advisor with specified id not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unexpected application error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/users/current/accounts/{accountId}/expert-advisors/{expertId}/file": {
      "put": {
        "summary": "Uploads expert advisor file",
        "description": "Uploads an expert advisor file. EAs which use DLLs are not supported. Requires ea.manage permission for MT5 account. Requires access to trading-account-management-api:rest:public:ea:uploadEAFile method which is included into writer role.",
        "x-authorization": {
          "method": "trading-account-management-api:rest:public:ea:uploadEAFile",
          "roles": [
            "writer"
          ]
        },
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "auth-token",
            "description": "Authorization token",
            "in": "header",
            "type": "string",
            "required": true
          },
          {
            "name": "accountId",
            "description": "MetaTrader account id",
            "type": "string",
            "in": "path",
            "required": true
          },
          {
            "name": "expertId",
            "description": "Expert advisor id",
            "type": "string",
            "in": "path",
            "required": true
          },
          {
            "name": "file",
            "description": "Expert advisor file",
            "type": "file",
            "in": "formData",
            "required": false
          }
        ],
        "responses": {
          "204": {
            "description": "File uploaded successfully"
          },
          "400": {
            "description": "File is required",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Authorization failed.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Authorization token has no access to trading-account-management-api:rest:public:ea:uploadEAFile method.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "MetaTrader account or expert advisor with specified id not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unexpected application error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/accounts/{accountId}/redeploy": {
      "post": {
        "summary": "Redeploys trading account",
        "description": "Redeploys trading account. For others services only. Requires access to trading-account-management-api:rest:private:default:redeployByOtherServerRequest method. Requires access to account resource.",
        "x-authorization": {
          "method": "trading-account-management-api:rest:private:default:redeployByOtherServerRequest",
          "resources": [
            "account"
          ]
        },
        "parameters": [
          {
            "name": "auth-token",
            "description": "Authorization token",
            "in": "header",
            "type": "string",
            "required": true
          },
          {
            "name": "accountId",
            "description": "MetaTrader account id",
            "type": "string",
            "in": "path",
            "required": true
          },
          {
            "name": "reason",
            "description": "redeploy reason",
            "type": "string",
            "in": "query"
          },
          {
            "name": "target",
            "description": "new account target",
            "type": "string",
            "in": "query"
          },
          {
            "name": "host",
            "description": "host name the account is currently executing on",
            "type": "string",
            "in": "query",
            "required": true
          },
          {
            "name": "instanceIndex",
            "description": "instance index",
            "type": "number",
            "in": "query",
            "required": false
          }
        ],
        "responses": {
          "204": {
            "description": "MetaTrader account was successfully redeployed"
          },
          "401": {
            "description": "Authorization failed.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Authorization token has no access to trading-account-management-api:rest:private:default:redeployByOtherServerRequest method.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "MetaTrader account with specified id not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unexpected application error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/accounts/{accountId}/undeploy": {
      "post": {
        "summary": "Undeploys trading account",
        "description": "Undeploys trading account. Requires access to trading-account-management-api:rest:private:default:undeployByOtherServerRequest method. Requires access to account resource.",
        "x-authorization": {
          "method": "trading-account-management-api:rest:private:default:undeployByOtherServerRequest",
          "resources": [
            "account"
          ]
        },
        "parameters": [
          {
            "name": "auth-token",
            "description": "Authorization token",
            "in": "header",
            "type": "string",
            "required": true
          },
          {
            "name": "accountId",
            "description": "MetaTrader account id",
            "type": "string",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "MetaTrader account was successfully undeployed"
          },
          "401": {
            "description": "Authorization failed.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Authorization token has no access to trading-account-management-api:rest:private:default:undeployByOtherServerRequest method.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "MetaTrader account with specified id not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unexpected application error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/accounts/broadcast-last-events": {
      "post": {
        "summary": "Broadcasts last accounts events for all users to billing API",
        "description": "Broadcasts last accounts events for all users to billing API. Requires access to trading-account-management-api:rest:private:default:broadcastLastAccountsEvents method. Requires access to account resource.",
        "x-authorization": {
          "method": "trading-account-management-api:rest:private:default:broadcastLastAccountsEvents",
          "resources": [
            "account"
          ]
        },
        "parameters": [
          {
            "name": "auth-token",
            "description": "Authorization token",
            "in": "header",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Events was successfully sent"
          },
          "401": {
            "description": "Authorization failed.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Authorization token has no access to trading-account-management-api:rest:private:default:broadcastLastAccountsEvents method.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unexpected application error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/users/current/servers/mt-client-api": {
      "get": {
        "summary": "Returns url of a client-api server",
        "description": "Returns url of a client-api server. Requires access to trading-account-management-api:rest:public:default:getClientServer method. Requires access to account resource.",
        "x-authorization": {
          "method": "trading-account-management-api:rest:public:default:getClientServer",
          "resources": [
            "account"
          ]
        },
        "parameters": [
          {
            "name": "auth-token",
            "description": "Authorization token or account access token",
            "in": "header",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Client server information returned",
            "schema": {
              "$ref": "#/definitions/ClientServer"
            }
          },
          "401": {
            "description": "Authorization failed.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Authorization token has no access to trading-account-management-api:rest:public:default:getClientServer method.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unexpected application error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/users/current/regions": {
      "get": {
        "summary": "Returns list of regions available to user",
        "description": "Returns list of regions available to user. Requires access to trading-account-management-api:rest:public:default:getRegions method. Requires access to account resource.",
        "x-authorization": {
          "method": "trading-account-management-api:rest:public:default:getRegions",
          "resources": [
            "account"
          ]
        },
        "parameters": [
          {
            "name": "auth-token",
            "description": "Authorization token or account access token",
            "in": "header",
            "type": "string",
            "required": true
          },
          {
            "name": "version",
            "description": "Response format version. v1 is deprecated but still used for backwards compatibility",
            "in": "query",
            "type": "string",
            "enum": [
              "v1",
              "v2"
            ],
            "default": "v1",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "List of regions user can access",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Region"
              }
            }
          },
          "401": {
            "description": "Authorization failed.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Authorization token has no access to trading-account-management-api:rest:public:default:getRegions method.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unexpected application error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/users/current/provisioning-profiles/{profileId}/mt4-demo-accounts": {
      "post": {
        "summary": "Creates MT4 demo account",
        "description": "Creates MT4 demo account. Requires access to trading-account-management-api:rest:public:mt-account-generator:createMT4DemoAccount method which is included into writer role. Requires access to mt-server resource.",
        "x-authorization": {
          "method": "trading-account-management-api:rest:public:mt-account-generator:createMT4DemoAccount",
          "roles": [
            "writer"
          ],
          "resources": [
            "mt-server"
          ]
        },
        "parameters": [
          {
            "name": "auth-token",
            "description": "Authorization token",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "profileId",
            "description": "Id of the provisioning profile which will be used to generate the account. Please use a value of `default` in order to use MT server name provided in the request instead",
            "type": "string",
            "required": true,
            "in": "path"
          },
          {
            "name": "account",
            "description": "New account data",
            "schema": {
              "$ref": "#/definitions/Metatrader4DemoAccountRequest"
            },
            "in": "body",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Demo account created successfully",
            "schema": {
              "$ref": "#/definitions/MetatraderAccountCredentials"
            }
          },
          "400": {
            "description": "Validation failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Authorization failed.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Authorization token has no access to trading-account-management-api:rest:public:mt-account-generator:createMT4DemoAccount method.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unexpected application error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/users/current/provisioning-profiles/{profileId}/mt5-demo-accounts": {
      "post": {
        "summary": "Creates MT5 demo account",
        "description": "Creates MT5 demo account. Requires access to trading-account-management-api:rest:public:mt-account-generator:createMT5DemoAccount method which is included into writer role. Requires access to mt-server resource.",
        "x-authorization": {
          "method": "trading-account-management-api:rest:public:mt-account-generator:createMT5DemoAccount",
          "roles": [
            "writer"
          ],
          "resources": [
            "mt-server"
          ]
        },
        "parameters": [
          {
            "name": "auth-token",
            "description": "Authorization token",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "profileId",
            "description": "Id of the provisioning profile which will be used to generate the account. Please use a value of `default` in order to use MT server name provided in the request instead",
            "type": "string",
            "required": true,
            "in": "path"
          },
          {
            "name": "account",
            "description": "New account data",
            "schema": {
              "$ref": "#/definitions/Metatrader5DemoAccountRequest"
            },
            "in": "body",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Demo account created successfully",
            "schema": {
              "$ref": "#/definitions/MetatraderAccountCredentials"
            }
          },
          "400": {
            "description": "Validation failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Authorization failed.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Authorization token has no access to trading-account-management-api:rest:public:mt-account-generator:createMT5DemoAccount method.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unexpected application error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/users/current/provisioning-profiles/{profileId}/mt4-live-accounts": {
      "post": {
        "summary": "Creates MT4 live account",
        "description": "Creates MT4 live account. Requires access to trading-account-management-api:rest:public:mt-account-generator:createMT4LiveAccount method which is included into writer role. Requires access to mt-server resource.",
        "x-authorization": {
          "method": "trading-account-management-api:rest:public:mt-account-generator:createMT4LiveAccount",
          "roles": [
            "writer"
          ],
          "resources": [
            "mt-server"
          ]
        },
        "parameters": [
          {
            "name": "auth-token",
            "description": "Authorization token",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "profileId",
            "description": "Id of the provisioning profile which will be used to generate the account. Please use a value of `default` in order to use MT server name provided in the request instead",
            "type": "string",
            "required": true,
            "in": "path"
          },
          {
            "name": "account",
            "description": "New account data",
            "schema": {
              "$ref": "#/definitions/Metatrader4LiveAccountRequest"
            },
            "in": "body",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Live account created successfully",
            "schema": {
              "$ref": "#/definitions/MetatraderAccountCredentials"
            }
          },
          "400": {
            "description": "Validation failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Authorization failed.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Authorization token has no access to trading-account-management-api:rest:public:mt-account-generator:createMT4LiveAccount method.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unexpected application error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/users/current/provisioning-profiles/{profileId}/mt5-live-accounts": {
      "post": {
        "summary": "Creates MT5 live account",
        "description": "Creates MT5 live account. Requires access to trading-account-management-api:rest:public:mt-account-generator:createMT5LiveAccount method which is included into writer role. Requires access to mt-server resource.",
        "x-authorization": {
          "method": "trading-account-management-api:rest:public:mt-account-generator:createMT5LiveAccount",
          "roles": [
            "writer"
          ],
          "resources": [
            "mt-server"
          ]
        },
        "parameters": [
          {
            "name": "auth-token",
            "description": "Authorization token",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "profileId",
            "description": "Id of the provisioning profile which will be used to generate the account. Please use a value of `default` in order to use MT server name provided in the request instead",
            "type": "string",
            "required": true,
            "in": "path"
          },
          {
            "name": "account",
            "description": "New account data",
            "schema": {
              "$ref": "#/definitions/Metatrader5LiveAccountRequest"
            },
            "in": "body",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Live account created successfully",
            "schema": {
              "$ref": "#/definitions/MetatraderAccountCredentials"
            }
          },
          "400": {
            "description": "Validation failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Authorization failed.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Authorization token has no access to trading-account-management-api:rest:public:mt-account-generator:createMT5LiveAccount method.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unexpected application error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/adm/tasks": {
      "get": {
        "summary": "Returns a list of scheduled and recent tasks",
        "x-authorization": {
          "disabled": true
        },
        "responses": {
          "200": {
            "description": "Response with tasks",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SchedulerTask"
              }
            }
          },
          "500": {
            "description": "Unexpected application error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/uat/data-sets": {
      "get": {
        "summary": "Returns a list of registered UAT data sets",
        "description": "Returns a list of registered UAT data sets",
        "x-authorization": {
          "custom": true
        },
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "uat-token",
            "description": "auth token",
            "in": "header",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "result contains UAT data sets",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DataSet"
              }
            }
          },
          "500": {
            "description": "Unexpected application error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/uat/data-sets/{id}/apply": {
      "post": {
        "summary": "Applies a registered UAT data set with an id specified",
        "description": "Applies a registered UAT data set with an id specified",
        "x-authorization": {
          "custom": true
        },
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "uat-token",
            "description": "auth token",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "description": "data set id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "params",
            "description": "optional data set parameters",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DataSetParams"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "data set successfully applied"
          },
          "404": {
            "description": "data set not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unexpected application error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/redis/statistics": {
      "get": {
        "summary": "Returns redis traffic statistics",
        "description": "Returns redis traffic statistics. Requires access to express-microservice:rest:private:default:getRedisStatistics method.",
        "x-authorization": {
          "method": "express-microservice:rest:private:default:getRedisStatistics"
        },
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "auth-token",
            "description": "authorization token required if authorization is enabled",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Redis traffic statistics",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Authorization failed.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Authorization token has no access to express-microservice:rest:private:default:getRedisStatistics method.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unexpected application error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/health": {
      "get": {
        "summary": "Executes health checks",
        "description": "Executes health checks",
        "x-authorization": {
          "disabled": true
        },
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "health checks passed",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/HealthCheckResult"
              }
            }
          },
          "500": {
            "description": "Unexpected application error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "ListOfProvisioningProfiles": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/ProvisioningProfile"
      },
      "uniqueItems": true
    },
    "NewProvisioningProfile": {
      "type": "object",
      "required": [
        "name",
        "version",
        "brokerTimezone",
        "brokerDSTSwitchTimezone"
      ],
      "properties": {
        "name": {
          "description": "User-defined provisioning profile name",
          "type": "string"
        },
        "version": {
          "description": "MetaTrader version",
          "type": "integer",
          "enum": [
            4,
            5
          ]
        },
        "brokerTimezone": {
          "description": "Broker timezone name from Time Zone Database",
          "type": "string"
        },
        "brokerDSTSwitchTimezone": {
          "description": "Timezone according to which daylight saving time switch happens on broker server",
          "type": "string"
        },
        "type": {
          "description": "Provisioning profile type. Default is mtTerminal",
          "type": "string",
          "enum": [
            "mtTerminal",
            "managerApi",
            "managerUi"
          ]
        },
        "managerLogin": {
          "description": "MetaTrader manager login",
          "type": "number"
        },
        "managerPassword": {
          "description": "MetaTrader manager password",
          "type": "string"
        },
        "managerServer": {
          "description": "Colon separated address and port of the manager server",
          "type": "string"
        }
      }
    },
    "ProvisioningProfile": {
      "type": "object",
      "required": [
        "_id",
        "name",
        "version",
        "status",
        "brokerTimezone",
        "brokerDSTSwitchTimezone",
        "type"
      ],
      "properties": {
        "_id": {
          "description": "Unique provisioning profile id",
          "type": "string"
        },
        "name": {
          "description": "User-defined provisioning profile name",
          "type": "string"
        },
        "version": {
          "description": "MetaTrader version",
          "type": "integer"
        },
        "status": {
          "description": "Provisioning profile status. if the status is `active`, this means that all the necessary files are uploaded, otherwise the status is `new`",
          "type": "string",
          "enum": [
            "new",
            "active"
          ]
        },
        "brokerTimezone": {
          "description": "Broker timezone name from Time Zone Database",
          "type": "string"
        },
        "brokerDSTSwitchTimezone": {
          "description": "Timezone according to which daylight saving time switch happens on broker server",
          "type": "string"
        },
        "type": {
          "description": "Provisioning profile type",
          "type": "string",
          "enum": [
            "mtTerminal",
            "managerApi",
            "managerUi"
          ]
        },
        "managerLogin": {
          "description": "MetaTrader manager login",
          "type": "number"
        },
        "managerPassword": {
          "description": "MetaTrader manager password",
          "type": "string"
        },
        "managerServer": {
          "description": "Colon separated address and port of the manager server",
          "type": "string"
        }
      }
    },
    "ProvisioningProfileId": {
      "type": "object",
      "description": "Created provisioning profile id",
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "description": "Created provisioning profile id",
          "type": "string"
        }
      }
    },
    "UpdatedProvisioningProfile": {
      "type": "object",
      "description": "Provisioning profile update data",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "description": "Provisioning profile name",
          "type": "string"
        },
        "brokerTimezone": {
          "description": "Broker timezone name from Time Zone Database",
          "type": "string"
        },
        "brokerDSTSwitchTimezone": {
          "description": "Timezone according to which daylight saving time switch happens on broker server",
          "type": "string"
        },
        "managerLogin": {
          "description": "MetaTrader manager login",
          "type": "number"
        },
        "managerPassword": {
          "description": "MetaTrader manager password",
          "type": "string"
        },
        "managerServer": {
          "description": "Colon separated address and port of the manager server",
          "type": "string"
        }
      }
    },
    "MetatraderAccountIdAndState": {
      "type": "object",
      "description": "MetaTrader account id",
      "required": [
        "id",
        "state"
      ],
      "properties": {
        "id": {
          "description": "Created MetaTrader account id",
          "type": "string"
        },
        "state": {
          "description": "State of the account created",
          "type": "string",
          "enum": [
            "UNDEPLOYED",
            "DEPLOYED"
          ]
        }
      }
    },
    "MetatraderAccountToken": {
      "type": "object",
      "description": "MetaTrader account token",
      "required": [
        "token"
      ],
      "properties": {
        "token": {
          "description": "MetaTrader account token",
          "type": "string"
        }
      }
    },
    "NewMetaTraderAccount": {
      "type": "object",
      "required": [
        "login",
        "server",
        "name",
        "magic",
        "password"
      ],
      "properties": {
        "symbol": {
          "description": "Any MetaTrader symbol your broker provides historical market data for. This value should be specified for G1 accounts only and only in case your MT account fails to connect to broker",
          "type": "string"
        },
        "magic": {
          "description": "Magic value the trades should be performed using. When manualTrades field is set to true, magic value must be 0",
          "type": "number"
        },
        "quoteStreamingIntervalInSeconds": {
          "description": "Quote streaming interval in seconds. Set to 0 in order to receive quotes on each tick. Default value is 2.5 seconds. Intervals less than 2.5 seconds are supported only for G2",
          "type": "number",
          "minimum": 0,
          "maximum": 60,
          "default": 2.5
        },
        "tags": {
          "description": "User-defined account tags",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "metadata": {
          "description": "Extra information which can be stored together with your account. Total length of this field after serializing it to JSON is limited to 1024 characters",
          "type": "object",
          "additionalProperties": true
        },
        "reliability": {
          "type": "string",
          "description": "Used to increase the reliability of the account. High is a recommended value for production environment. Default value is high",
          "enum": [
            "regular",
            "high"
          ],
          "default": "high"
        },
        "resourceSlots": {
          "type": "integer",
          "description": "Number of resource slots to allocate to account. Allocating extra resource slots results in better account performance under load which is useful for some applications. E.g. if you have many accounts copying the same strategy via CooyFactory API, then you can increase resourceSlots to get a lower trade copying latency. Please note that allocating extra resource slots is a paid option. Default is 1",
          "default": 1
        },
        "copyFactoryResourceSlots": {
          "type": "integer",
          "description": "Number of CopyFactory 2 resource slots to allocate to account. Allocating extra resource slots results in lower trade copying latency. Please note that allocating extra resource slots is a paid option. Please also note that CopyFactory 2 uses redundant infrastructure so that each CopyFactory resource slot is billed as 2 standard resource slots. You will be billed for CopyFactory 2 resource slots only if you have added your account to CopyFactory 2 by specifying copyFactoryRoles field. Default is 1",
          "default": 1
        },
        "region": {
          "type": "string",
          "description": "Region id to deploy account at. One of returned by the /users/current/regions endpoint"
        },
        "name": {
          "description": "Human-readable account name",
          "type": "string"
        },
        "manualTrades": {
          "description": "Flag indicating if trades placed on this account are manual trades. Supported for G2 only. Default is false",
          "type": "boolean",
          "default": false
        },
        "slippage": {
          "description": "Default trade slippage in points. Should be greater or equal to zero. If not specified, system internal setting will be used which we believe is reasonable for most cases",
          "type": "number",
          "format": "integer"
        },
        "provisioningProfileId": {
          "description": "Id of the provisioning profile that was used as the basis for creating this account.Required for cloud account",
          "type": "string"
        },
        "login": {
          "description": "MetaTrader account number. Only digits are allowed",
          "type": "string"
        },
        "password": {
          "description": "MetaTrader account password. The password can be either investor password for read-only access or master password to enable trading features. Required for cloud account",
          "type": "string"
        },
        "server": {
          "description": "MetaTrader server name to connect to",
          "type": "string"
        },
        "platform": {
          "description": "MetaTrader platform",
          "type": "string",
          "enum": [
            "mt4",
            "mt5"
          ]
        },
        "type": {
          "description": "Account type. Executing accounts as cloud-g2 is faster and cheaper. Default value is cloud-g2",
          "enum": [
            "cloud-g1",
            "cloud-g2"
          ],
          "type": "string",
          "default": "cloud-g2"
        },
        "baseCurrency": {
          "type": "string",
          "description": "3-character ISO currency code of the account base currency. Default value is USD. The setting is to be used for copy trading accounts which use national currencies only, such as some Brazilian brokers. You should not alter this setting unless you understand what you are doing",
          "default": "USD"
        },
        "copyFactoryRoles": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "PROVIDER",
              "SUBSCRIBER"
            ]
          },
          "description": "Account roles for CopyFactory2 API"
        },
        "riskManagementApiEnabled": {
          "type": "boolean",
          "description": "Flag indicating that risk management API should be enabled on account. Default value is false",
          "default": false
        },
        "metastatsHourlyTarificationEnabled": {
          "type": "boolean",
          "description": "Flag indicating that hourly tarification for MetaStats should be enabled on account. Default is to bill MetaStats API access per API call",
          "default": false
        }
      }
    },
    "NewMetaTraderAccountReplica": {
      "type": "object",
      "required": [
        "magic",
        "region"
      ],
      "properties": {
        "symbol": {
          "description": "Any MetaTrader symbol your broker provides historical market data for. This value should be specified for G1 account replicas only and only in case your MT account replica fails to connect to broker",
          "type": "string"
        },
        "magic": {
          "description": "Magic value the trades should be performed using. When manualTrades field is set to true, magic value must be 0",
          "type": "number"
        },
        "quoteStreamingIntervalInSeconds": {
          "description": "Quote streaming interval in seconds. Set to 0 in order to receive quotes on each tick. Default value is 2.5 seconds. Intervals less than 2.5 seconds are supported only for G2",
          "type": "number",
          "minimum": 0,
          "maximum": 60,
          "default": 2.5
        },
        "tags": {
          "description": "User-defined account replica tags",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "metadata": {
          "description": "Extra information which can be stored together with your account replica. Total length of this field after serializing it to JSON is limited to 1024 characters",
          "type": "object",
          "additionalProperties": true
        },
        "reliability": {
          "type": "string",
          "description": "Used to increase the reliability of the account replica. High is a recommended value for production environment. Default value is high",
          "enum": [
            "regular",
            "high"
          ],
          "default": "high"
        },
        "resourceSlots": {
          "type": "integer",
          "description": "Number of resource slots to allocate to account replica. Allocating extra resource slots results in better account performance under load which is useful for some applications. E.g. if you have many accounts copying the same strategy via CooyFactory API, then you can increase resourceSlots to get a lower trade copying latency. Please note that allocating extra resource slots is a paid option. Default is 1",
          "default": 1
        },
        "copyFactoryResourceSlots": {
          "type": "integer",
          "description": "Number of CopyFactory 2 resource slots to allocate to account replica. Allocating extra resource slots results in lower trade copying latency. Please note that allocating extra resource slots is a paid option. Please also note that CopyFactory 2 uses redundant infrastructure so that each CopyFactory resource slot is billed as 2 standard resource slots. You will be billed for CopyFactory 2 resource slots only if you have added your account to CopyFactory 2 by specifying copyFactoryRoles field. Default is 1",
          "default": 1
        },
        "region": {
          "type": "string",
          "description": "Region id to deploy account replica at. One of returned by the /users/current/regions endpoint"
        }
      }
    },
    "AccountConnection": {
      "type": "object",
      "required": [
        "region",
        "zone",
        "application"
      ],
      "properties": {
        "region": {
          "description": "region the account is connected at",
          "type": "string"
        },
        "zone": {
          "description": "availability zone the account is connected at",
          "type": "string"
        },
        "application": {
          "description": "application the account is connected to",
          "type": "string",
          "enum": [
            "MetaApi",
            "CopyFactory subscriber",
            "CopyFactory provider",
            "CopyFactory history import",
            "Risk management"
          ]
        }
      }
    },
    "MetaTraderAccount": {
      "type": "object",
      "required": [
        "_id",
        "login",
        "name",
        "server",
        "magic",
        "connectionStatus",
        "state",
        "type",
        "accessToken",
        "region",
        "manualTrades",
        "hash",
        "quoteStreamingIntervalInSeconds",
        "tags",
        "reliability",
        "baseCurrency",
        "copyFactoryRoles",
        "resourceSlots",
        "copyFactoryResourceSlots",
        "version",
        "userId",
        "accountReplicas",
        "riskManagementApiEnabled",
        "metastatsHourlyTarificationEnabled",
        "primaryReplica",
        "createdAt"
      ],
      "properties": {
        "_id": {
          "type": "string",
          "description": "Unique account id"
        },
        "state": {
          "type": "string",
          "description": "Current account state",
          "enum": [
            "CREATED",
            "DEPLOYING",
            "DEPLOYED",
            "DEPLOY_FAILED",
            "UNDEPLOYING",
            "UNDEPLOYED",
            "UNDEPLOY_FAILED",
            "DELETING",
            "DELETE_FAILED",
            "REDEPLOY_FAILED"
          ]
        },
        "magic": {
          "description": "Magic value the trades should be performed using",
          "type": "number"
        },
        "connectionStatus": {
          "description": "Connection status of the MetaTrader terminal to the application",
          "type": "string",
          "enum": [
            "CONNECTED",
            "DISCONNECTED",
            "DISCONNECTED_FROM_BROKER"
          ]
        },
        "quoteStreamingIntervalInSeconds": {
          "description": "Quote streaming interval in seconds. Set to 0 in order to receive quotes on each tick. Intervals less than 2.5 seconds are supported only for G2",
          "type": "number"
        },
        "symbol": {
          "description": " Any symbol provided by broker (required for G1 only)",
          "type": "string"
        },
        "reliability": {
          "type": "string",
          "description": "Used to increase the reliability of the account. High is a recommended value for production environment",
          "enum": [
            "regular",
            "high"
          ]
        },
        "tags": {
          "description": "User-defined account tags",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "metadata": {
          "description": "Extra information which can be stored together with your account. Total length of this field after serializing it to JSON is limited to 1024 characters",
          "type": "object",
          "additionalProperties": true
        },
        "resourceSlots": {
          "type": "integer",
          "description": "Number of resource slots to allocate to account. Allocating extra resource slots results in better account performance under load which is useful for some applications. E.g. if you have many accounts copying the same strategy via CooyFactory API, then you can increase resourceSlots to get a lower trade copying latency. Please note that allocating extra resource slots is a paid option"
        },
        "copyFactoryResourceSlots": {
          "type": "integer",
          "description": "Number of CopyFactory 2 resource slots to allocate to account. Allocating extra resource slots results in lower trade copying latency. Please note that allocating extra resource slots is a paid option. Please also note that CopyFactory 2 uses redundant infrastructure so that each CopyFactory resource slot is billed as 2 standard resource slots. You will be billed for CopyFactory 2 resource slots only if you have added your account to CopyFactory 2 by specifying copyFactoryRoles field"
        },
        "region": {
          "type": "string",
          "description": "Region id to deploy account at. One of returned by the /users/current/regions endpoint"
        },
        "createdAt": {
          "type": "string",
          "format": "datetime",
          "description": "Time the account was created at, in ISO format"
        },
        "name": {
          "description": "Human-readable account name",
          "type": "string"
        },
        "manualTrades": {
          "description": "Flag indicating if trades placed on this account are manual trades. Supported for G2 only",
          "type": "boolean"
        },
        "slippage": {
          "description": "Default trade slippage in points. Should be greater or equal to zero. If not specified, system internal setting will be used which we believe is reasonable for most cases",
          "type": "number",
          "format": "integer"
        },
        "provisioningProfileId": {
          "description": "Id of the provisioning profile that was used as the basis for creating this account",
          "type": "string"
        },
        "login": {
          "description": "MetaTrader account number",
          "type": "string"
        },
        "server": {
          "description": "MetaTrader server name to connect to",
          "type": "string"
        },
        "type": {
          "description": "Account type. Executing accounts as cloud-g2 is faster and cheaper",
          "type": "string",
          "enum": [
            "cloud-g1",
            "cloud-g2"
          ]
        },
        "version": {
          "type": "number",
          "description": "MetaTrader version"
        },
        "hash": {
          "type": "number",
          "description": "Hash-code of the account"
        },
        "baseCurrency": {
          "type": "string",
          "description": "3-character ISO currency code of the account base currency. The setting is to be used for copy trading accounts which use national currencies only, such as some Brazilian brokers. You should not alter this setting unless you understand what you are doing"
        },
        "copyFactoryRoles": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "PROVIDER",
              "SUBSCRIBER"
            ]
          },
          "description": "Account roles for CopyFactory2 API"
        },
        "metastatsHourlyTarificationEnabled": {
          "type": "boolean",
          "description": "Flag indicating that hourly tarification for MetaStats is enabled on account"
        },
        "riskManagementApiEnabled": {
          "type": "boolean",
          "description": "Flag indicating that risk management API is enabled on account"
        },
        "accessToken": {
          "type": "string",
          "description": "authorization access token to be used for accessing single account data. Intended to be used in browser API."
        },
        "connections": {
          "description": "active account connections. Empty value means that connection status is not known.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AccountConnection"
          }
        },
        "primaryReplica": {
          "type": "boolean",
          "description": "flag indicating that account is primary"
        },
        "userId": {
          "description": "User id",
          "type": "string"
        },
        "primaryAccountId": {
          "description": "Primary account id. Only replicas can have this field",
          "type": "string"
        },
        "accountReplicas": {
          "type": "array",
          "description": "MetaTrader account replicas",
          "items": {
            "type": "object",
            "required": [
              "_id",
              "state",
              "magic",
              "connectionStatus",
              "region",
              "quoteStreamingIntervalInSeconds",
              "tags",
              "reliability",
              "resourceSlots",
              "copyFactoryResourceSlots"
            ],
            "properties": {
              "_id": {
                "type": "string",
                "description": "Unique account replica id"
              },
              "state": {
                "type": "string",
                "description": "Current account replica state",
                "enum": [
                  "CREATED",
                  "DEPLOYING",
                  "DEPLOYED",
                  "DEPLOY_FAILED",
                  "UNDEPLOYING",
                  "UNDEPLOYED",
                  "UNDEPLOY_FAILED",
                  "DELETING",
                  "DELETE_FAILED",
                  "REDEPLOY_FAILED"
                ]
              },
              "magic": {
                "description": "Magic value the trades should be performed using",
                "type": "number"
              },
              "connectionStatus": {
                "description": "Connection status of the MetaTrader terminal to the application",
                "type": "string",
                "enum": [
                  "CONNECTED",
                  "DISCONNECTED",
                  "DISCONNECTED_FROM_BROKER"
                ]
              },
              "quoteStreamingIntervalInSeconds": {
                "description": "Quote streaming interval in seconds. Set to 0 in order to receive quotes on each tick. Intervals less than 2.5 seconds are supported only for G2",
                "type": "number"
              },
              "symbol": {
                "description": " Any symbol provided by broker (required for G1 only)",
                "type": "string"
              },
              "reliability": {
                "type": "string",
                "description": "Used to increase the reliability of the account replica. High is a recommended value for production environment",
                "enum": [
                  "regular",
                  "high"
                ]
              },
              "tags": {
                "description": "User-defined account replica tags",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "metadata": {
                "description": "Extra information which can be stored together with your account replica. Total length of this field after serializing it to JSON is limited to 1024 characters",
                "type": "object",
                "additionalProperties": true
              },
              "resourceSlots": {
                "type": "integer",
                "description": "Number of resource slots to allocate to account replica. Allocating extra resource slots results in better account performance under load which is useful for some applications. E.g. if you have many accounts copying the same strategy via CooyFactory API, then you can increase resourceSlots to get a lower trade copying latency. Please note that allocating extra resource slots is a paid option"
              },
              "copyFactoryResourceSlots": {
                "type": "integer",
                "description": "Number of CopyFactory 2 resource slots to allocate to account replica. Allocating extra resource slots results in lower trade copying latency. Please note that allocating extra resource slots is a paid option. Please also note that CopyFactory 2 uses redundant infrastructure so that each CopyFactory resource slot is billed as 2 standard resource slots. You will be billed for CopyFactory 2 resource slots only if you have added your account to CopyFactory 2 by specifying copyFactoryRoles field"
              },
              "region": {
                "type": "string",
                "description": "Region id to deploy account replica at. One of returned by the /users/current/regions endpoint"
              },
              "createdAt": {
                "type": "string",
                "format": "datetime",
                "description": "Time the account replica was created at, in ISO format"
              }
            }
          }
        }
      }
    },
    "MetaTraderAccountWithoutReplicas": {
      "type": "object",
      "required": [
        "_id",
        "login",
        "name",
        "server",
        "magic",
        "connectionStatus",
        "state",
        "type",
        "accessToken",
        "region",
        "manualTrades",
        "hash",
        "quoteStreamingIntervalInSeconds",
        "tags",
        "reliability",
        "baseCurrency",
        "copyFactoryRoles",
        "resourceSlots",
        "copyFactoryResourceSlots",
        "version",
        "userId",
        "riskManagementApiEnabled",
        "metastatsHourlyTarificationEnabled",
        "createdAt"
      ],
      "properties": {
        "_id": {
          "type": "string",
          "description": "Unique account id"
        },
        "state": {
          "type": "string",
          "description": "Current account state",
          "enum": [
            "CREATED",
            "DEPLOYING",
            "DEPLOYED",
            "DEPLOY_FAILED",
            "UNDEPLOYING",
            "UNDEPLOYED",
            "UNDEPLOY_FAILED",
            "DELETING",
            "DELETE_FAILED",
            "REDEPLOY_FAILED"
          ]
        },
        "magic": {
          "description": "Magic value the trades should be performed using",
          "type": "number"
        },
        "connectionStatus": {
          "description": "Connection status of the MetaTrader terminal to the application",
          "type": "string",
          "enum": [
            "CONNECTED",
            "DISCONNECTED",
            "DISCONNECTED_FROM_BROKER"
          ]
        },
        "quoteStreamingIntervalInSeconds": {
          "description": "Quote streaming interval in seconds. Set to 0 in order to receive quotes on each tick. Intervals less than 2.5 seconds are supported only for G2",
          "type": "number"
        },
        "symbol": {
          "description": " Any symbol provided by broker (required for G1 only)",
          "type": "string"
        },
        "reliability": {
          "type": "string",
          "description": "Used to increase the reliability of the account. High is a recommended value for production environment",
          "enum": [
            "regular",
            "high"
          ]
        },
        "tags": {
          "description": "User-defined account tags",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "metadata": {
          "description": "Extra information which can be stored together with your account. Total length of this field after serializing it to JSON is limited to 1024 characters",
          "type": "object",
          "additionalProperties": true
        },
        "resourceSlots": {
          "type": "integer",
          "description": "Number of resource slots to allocate to account. Allocating extra resource slots results in better account performance under load which is useful for some applications. E.g. if you have many accounts copying the same strategy via CooyFactory API, then you can increase resourceSlots to get a lower trade copying latency. Please note that allocating extra resource slots is a paid option"
        },
        "copyFactoryResourceSlots": {
          "type": "integer",
          "description": "Number of CopyFactory 2 resource slots to allocate to account. Allocating extra resource slots results in lower trade copying latency. Please note that allocating extra resource slots is a paid option. Please also note that CopyFactory 2 uses redundant infrastructure so that each CopyFactory resource slot is billed as 2 standard resource slots. You will be billed for CopyFactory 2 resource slots only if you have added your account to CopyFactory 2 by specifying copyFactoryRoles field"
        },
        "region": {
          "type": "string",
          "description": "Region id to deploy account at. One of returned by the /users/current/regions endpoint"
        },
        "createdAt": {
          "type": "string",
          "format": "datetime",
          "description": "Time the account was created at, in ISO format"
        },
        "name": {
          "description": "Human-readable account name",
          "type": "string"
        },
        "manualTrades": {
          "description": "Flag indicating if trades placed on this account are manual trades. Supported for G2 only",
          "type": "boolean"
        },
        "slippage": {
          "description": "Default trade slippage in points. Should be greater or equal to zero. If not specified, system internal setting will be used which we believe is reasonable for most cases",
          "type": "number",
          "format": "integer"
        },
        "provisioningProfileId": {
          "description": "Id of the provisioning profile that was used as the basis for creating this account",
          "type": "string"
        },
        "login": {
          "description": "MetaTrader account number",
          "type": "string"
        },
        "server": {
          "description": "MetaTrader server name to connect to",
          "type": "string"
        },
        "type": {
          "description": "Account type. Executing accounts as cloud-g2 is faster and cheaper",
          "type": "string",
          "enum": [
            "cloud-g1",
            "cloud-g2"
          ]
        },
        "version": {
          "type": "number",
          "description": "MetaTrader version"
        },
        "hash": {
          "type": "number",
          "description": "Hash-code of the account"
        },
        "baseCurrency": {
          "type": "string",
          "description": "3-character ISO currency code of the account base currency. The setting is to be used for copy trading accounts which use national currencies only, such as some Brazilian brokers. You should not alter this setting unless you understand what you are doing"
        },
        "copyFactoryRoles": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "PROVIDER",
              "SUBSCRIBER"
            ]
          },
          "description": "Account roles for CopyFactory2 API"
        },
        "metastatsHourlyTarificationEnabled": {
          "type": "boolean",
          "description": "Flag indicating that hourly tarification for MetaStats is enabled on account"
        },
        "riskManagementApiEnabled": {
          "type": "boolean",
          "description": "Flag indicating that risk management API is enabled on account"
        },
        "accessToken": {
          "type": "string",
          "description": "authorization access token to be used for accessing single account data. Intended to be used in browser API."
        },
        "primaryReplica": {
          "type": "boolean",
          "description": "flag indicating that account is primary"
        },
        "userId": {
          "description": "User id",
          "type": "string"
        }
      }
    },
    "MetaTraderAccountReplica": {
      "type": "object",
      "required": [
        "_id",
        "state",
        "magic",
        "connectionStatus",
        "region",
        "quoteStreamingIntervalInSeconds",
        "tags",
        "reliability",
        "resourceSlots",
        "copyFactoryResourceSlots",
        "primaryAccount",
        "createdAt"
      ],
      "properties": {
        "_id": {
          "type": "string",
          "description": "Unique account replica id"
        },
        "state": {
          "type": "string",
          "description": "Current account replica state",
          "enum": [
            "CREATED",
            "DEPLOYING",
            "DEPLOYED",
            "DEPLOY_FAILED",
            "UNDEPLOYING",
            "UNDEPLOYED",
            "UNDEPLOY_FAILED",
            "DELETING",
            "DELETE_FAILED",
            "REDEPLOY_FAILED"
          ]
        },
        "magic": {
          "description": "Magic value the trades should be performed using",
          "type": "number"
        },
        "connectionStatus": {
          "description": "Connection status of the MetaTrader terminal to the application",
          "type": "string",
          "enum": [
            "CONNECTED",
            "DISCONNECTED",
            "DISCONNECTED_FROM_BROKER"
          ]
        },
        "quoteStreamingIntervalInSeconds": {
          "description": "Quote streaming interval in seconds. Set to 0 in order to receive quotes on each tick. Intervals less than 2.5 seconds are supported only for G2",
          "type": "number"
        },
        "symbol": {
          "description": " Any symbol provided by broker (required for G1 only)",
          "type": "string"
        },
        "reliability": {
          "type": "string",
          "description": "Used to increase the reliability of the account replica. High is a recommended value for production environment",
          "enum": [
            "regular",
            "high"
          ]
        },
        "tags": {
          "description": "User-defined account replica tags",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "metadata": {
          "description": "Extra information which can be stored together with your account replica. Total length of this field after serializing it to JSON is limited to 1024 characters",
          "type": "object",
          "additionalProperties": true
        },
        "resourceSlots": {
          "type": "integer",
          "description": "Number of resource slots to allocate to account replica. Allocating extra resource slots results in better account performance under load which is useful for some applications. E.g. if you have many accounts copying the same strategy via CooyFactory API, then you can increase resourceSlots to get a lower trade copying latency. Please note that allocating extra resource slots is a paid option"
        },
        "copyFactoryResourceSlots": {
          "type": "integer",
          "description": "Number of CopyFactory 2 resource slots to allocate to account replica. Allocating extra resource slots results in lower trade copying latency. Please note that allocating extra resource slots is a paid option. Please also note that CopyFactory 2 uses redundant infrastructure so that each CopyFactory resource slot is billed as 2 standard resource slots. You will be billed for CopyFactory 2 resource slots only if you have added your account to CopyFactory 2 by specifying copyFactoryRoles field"
        },
        "region": {
          "type": "string",
          "description": "Region id to deploy account replica at. One of returned by the /users/current/regions endpoint"
        },
        "createdAt": {
          "type": "string",
          "format": "datetime",
          "description": "Time the account replica was created at, in ISO format"
        },
        "primaryAccount": {
          "type": "object",
          "description": "Primary account",
          "required": [
            "_id",
            "login",
            "name",
            "server",
            "magic",
            "connectionStatus",
            "state",
            "type",
            "accessToken",
            "region",
            "manualTrades",
            "hash",
            "quoteStreamingIntervalInSeconds",
            "tags",
            "reliability",
            "baseCurrency",
            "copyFactoryRoles",
            "resourceSlots",
            "copyFactoryResourceSlots",
            "version",
            "primaryReplica",
            "userId",
            "riskManagementApiEnabled",
            "metastatsHourlyTarificationEnabled",
            "createdAt"
          ],
          "properties": {
            "_id": {
              "type": "string",
              "description": "Unique account id"
            },
            "state": {
              "type": "string",
              "description": "Current account state",
              "enum": [
                "CREATED",
                "DEPLOYING",
                "DEPLOYED",
                "DEPLOY_FAILED",
                "UNDEPLOYING",
                "UNDEPLOYED",
                "UNDEPLOY_FAILED",
                "DELETING",
                "DELETE_FAILED",
                "REDEPLOY_FAILED"
              ]
            },
            "magic": {
              "description": "Magic value the trades should be performed using",
              "type": "number"
            },
            "connectionStatus": {
              "description": "Connection status of the MetaTrader terminal to the application",
              "type": "string",
              "enum": [
                "CONNECTED",
                "DISCONNECTED",
                "DISCONNECTED_FROM_BROKER"
              ]
            },
            "quoteStreamingIntervalInSeconds": {
              "description": "Quote streaming interval in seconds. Set to 0 in order to receive quotes on each tick. Intervals less than 2.5 seconds are supported only for G2",
              "type": "number"
            },
            "symbol": {
              "description": " Any symbol provided by broker (required for G1 only)",
              "type": "string"
            },
            "reliability": {
              "type": "string",
              "description": "Used to increase the reliability of the account. High is a recommended value for production environment",
              "enum": [
                "regular",
                "high"
              ]
            },
            "tags": {
              "description": "User-defined account tags",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "metadata": {
              "description": "Extra information which can be stored together with your account. Total length of this field after serializing it to JSON is limited to 1024 characters",
              "type": "object",
              "additionalProperties": true
            },
            "resourceSlots": {
              "type": "integer",
              "description": "Number of resource slots to allocate to account. Allocating extra resource slots results in better account performance under load which is useful for some applications. E.g. if you have many accounts copying the same strategy via CooyFactory API, then you can increase resourceSlots to get a lower trade copying latency. Please note that allocating extra resource slots is a paid option"
            },
            "copyFactoryResourceSlots": {
              "type": "integer",
              "description": "Number of CopyFactory 2 resource slots to allocate to account. Allocating extra resource slots results in lower trade copying latency. Please note that allocating extra resource slots is a paid option. Please also note that CopyFactory 2 uses redundant infrastructure so that each CopyFactory resource slot is billed as 2 standard resource slots. You will be billed for CopyFactory 2 resource slots only if you have added your account to CopyFactory 2 by specifying copyFactoryRoles field"
            },
            "region": {
              "type": "string",
              "description": "Region id to deploy account at. One of returned by the /users/current/regions endpoint"
            },
            "createdAt": {
              "type": "string",
              "format": "datetime",
              "description": "Time the account was created at, in ISO format"
            },
            "name": {
              "description": "Human-readable account name",
              "type": "string"
            },
            "manualTrades": {
              "description": "Flag indicating if trades placed on this account are manual trades. Supported for G2 only",
              "type": "boolean"
            },
            "slippage": {
              "description": "Default trade slippage in points. Should be greater or equal to zero. If not specified, system internal setting will be used which we believe is reasonable for most cases",
              "type": "number",
              "format": "integer"
            },
            "provisioningProfileId": {
              "description": "Id of the provisioning profile that was used as the basis for creating this account",
              "type": "string"
            },
            "login": {
              "description": "MetaTrader account number",
              "type": "string"
            },
            "server": {
              "description": "MetaTrader server name to connect to",
              "type": "string"
            },
            "type": {
              "description": "Account type. Executing accounts as cloud-g2 is faster and cheaper",
              "type": "string",
              "enum": [
                "cloud-g1",
                "cloud-g2"
              ]
            },
            "version": {
              "type": "number",
              "description": "MetaTrader version"
            },
            "hash": {
              "type": "number",
              "description": "Hash-code of the account"
            },
            "baseCurrency": {
              "type": "string",
              "description": "3-character ISO currency code of the account base currency. The setting is to be used for copy trading accounts which use national currencies only, such as some Brazilian brokers. You should not alter this setting unless you understand what you are doing"
            },
            "copyFactoryRoles": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "PROVIDER",
                  "SUBSCRIBER"
                ]
              },
              "description": "Account roles for CopyFactory2 API"
            },
            "metastatsHourlyTarificationEnabled": {
              "type": "boolean",
              "description": "Flag indicating that hourly tarification for MetaStats is enabled on account"
            },
            "riskManagementApiEnabled": {
              "type": "boolean",
              "description": "Flag indicating that risk management API is enabled on account"
            },
            "accessToken": {
              "type": "string",
              "description": "authorization access token to be used for accessing single account data. Intended to be used in browser API."
            },
            "primaryReplica": {
              "type": "boolean",
              "description": "flag indicating that account is primary"
            },
            "userId": {
              "description": "User id",
              "type": "string"
            },
            "connections": {
              "description": "active account connections. Empty value means that connection status is not known.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/AccountConnection"
              }
            }
          }
        }
      }
    },
    "MetaTraderAccountInfo": {
      "type": "object",
      "required": [
        "login",
        "password",
        "server",
        "version",
        "brokerTimezone",
        "brokerDSTSwitchTimezone",
        "serversFile",
        "magic",
        "manualTrades",
        "slippage",
        "quoteStreamingIntervalInSeconds",
        "type",
        "region",
        "copyFactoryResourceSlots",
        "baseCurrency",
        "userId",
        "accountReplicas"
      ],
      "properties": {
        "login": {
          "description": "MetaTrader account number",
          "type": "string"
        },
        "password": {
          "description": "MetaTrader account password",
          "type": "string"
        },
        "server": {
          "description": "MetaTrader server name to connect to",
          "type": "string"
        },
        "version": {
          "type": "number",
          "description": "MetaTrader version"
        },
        "brokerTimezone": {
          "description": "Broker timezone name from Time Zone Database",
          "type": "string"
        },
        "brokerDSTSwitchTimezone": {
          "description": "Timezone according to which daylight saving time switch happens on broker server",
          "type": "string"
        },
        "serversFile": {
          "description": "Content of provisioning profile",
          "type": "string"
        },
        "magic": {
          "description": "Magic value the trades should be performed using",
          "type": "number"
        },
        "manualTrades": {
          "description": "Flag indicating if trades placed on this account are manual trades. Default is false. Supported for G2 only.",
          "type": "boolean"
        },
        "slippage": {
          "description": "Default trade slippage in points. Should be greater or equal to zero. If not specified, system internal setting will be used which we believe is reasonable for most cases",
          "type": "number",
          "format": "integer"
        },
        "quoteStreamingIntervalInSeconds": {
          "description": "Quote streaming interval in seconds. Set to 0 in order to receive quotes on each tick. Default value is 2.5 seconds. Intervals less than 2.5 seconds are supported only for G2.",
          "type": "number"
        },
        "type": {
          "description": "Account type. Executing accounts as cloud-g2 is faster and cheaper.",
          "type": "string",
          "enum": [
            "cloud-g1",
            "cloud-g2"
          ]
        },
        "region": {
          "type": "string",
          "description": "region id to deploy account at. One of returned by the /users/current/regions endpoint"
        },
        "copyFactoryResourceSlots": {
          "type": "integer",
          "description": "Number of CopyFactory 2 resource slots to allocate to account. Allocating extra resource slots results in lower trade copying latency. Please note that allocating extra resource slots is a paid option. Please also note that CopyFactory 2 uses redundant infrastructure so that each CopyFactory resource slot is billed as 2 standard resource slots. You will be billed for CopyFactory 2 resource slots only if you have added your account to CopyFactory 2 by specifying copyFactoryRoles field. Default is 1."
        },
        "primaryAccountId": {
          "type": "string",
          "description": "id of the primary region account"
        },
        "riskManagementApiEnabled": {
          "type": "boolean",
          "description": "Flag indicating that risk management API is enabled on account"
        },
        "metastatsHourlyTarificationEnabled": {
          "type": "boolean",
          "description": "Flag indicating that hourly tarification for MetaStats is enabled on account. Default is to bill MetaStats API access per API call."
        },
        "baseCurrency": {
          "type": "string",
          "description": "3-character ISO currency code of the account base currency. Default value is USD. The setting is to be used for copy trading accounts which use national currencies only, such as some Brazilian brokers. You should not alter this setting unless you understand what you are doing."
        },
        "userId": {
          "description": "User id",
          "type": "string"
        },
        "accountReplicas": {
          "type": "array",
          "description": "MetaTrader account replicas",
          "items": {
            "type": "object",
            "required": [
              "_id",
              "state",
              "login",
              "name",
              "server",
              "magic",
              "connectionStatus",
              "type",
              "region"
            ],
            "properties": {
              "_id": {
                "type": "string",
                "description": "Unique account replica id"
              },
              "state": {
                "type": "string",
                "description": "Current account replica state",
                "enum": [
                  "CREATED",
                  "DEPLOYING",
                  "DEPLOYED",
                  "DEPLOY_FAILED",
                  "UNDEPLOYING",
                  "UNDEPLOYED",
                  "UNDEPLOY_FAILED",
                  "DELETING",
                  "DELETE_FAILED",
                  "REDEPLOY_FAILED"
                ]
              },
              "magic": {
                "description": "Magic value the trades should be performed using",
                "type": "number"
              },
              "connectionStatus": {
                "description": "Connection status of the MetaTrader terminal to the application",
                "type": "string",
                "enum": [
                  "CONNECTED",
                  "DISCONNECTED",
                  "DISCONNECTED_FROM_BROKER"
                ]
              },
              "quoteStreamingIntervalInSeconds": {
                "description": "Quote streaming interval in seconds. Set to 0 in order to receive quotes on each tick. Intervals less than 2.5 seconds are supported only for G2",
                "type": "number"
              },
              "symbol": {
                "description": " Any symbol provided by broker (required for G1 only)",
                "type": "string"
              },
              "reliability": {
                "type": "string",
                "description": "Used to increase the reliability of the account replica. High is a recommended value for production environment",
                "enum": [
                  "regular",
                  "high"
                ]
              },
              "tags": {
                "description": "User-defined account replica tags",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "metadata": {
                "description": "Extra information which can be stored together with your account replica. Total length of this field after serializing it to JSON is limited to 1024 characters",
                "type": "object",
                "additionalProperties": true
              },
              "resourceSlots": {
                "type": "integer",
                "description": "Number of resource slots to allocate to account replica. Allocating extra resource slots results in better account performance under load which is useful for some applications. E.g. if you have many accounts copying the same strategy via CooyFactory API, then you can increase resourceSlots to get a lower trade copying latency. Please note that allocating extra resource slots is a paid option"
              },
              "copyFactoryResourceSlots": {
                "type": "integer",
                "description": "Number of CopyFactory 2 resource slots to allocate to account replica. Allocating extra resource slots results in lower trade copying latency. Please note that allocating extra resource slots is a paid option. Please also note that CopyFactory 2 uses redundant infrastructure so that each CopyFactory resource slot is billed as 2 standard resource slots. You will be billed for CopyFactory 2 resource slots only if you have added your account to CopyFactory 2 by specifying copyFactoryRoles field"
              },
              "region": {
                "type": "string",
                "description": "Region id to deploy account replica at. One of returned by the /users/current/regions endpoint"
              },
              "createdAt": {
                "type": "string",
                "format": "datetime",
                "description": "Time the account replica was created at, in ISO format"
              }
            }
          }
        },
        "primaryAccountHash": {
          "type": "number",
          "description": "hash number of the primary region account"
        }
      }
    },
    "MetastatsAccountInfo": {
      "type": "object",
      "required": [
        "login",
        "server",
        "version",
        "brokerTimezone",
        "brokerDSTSwitchTimezone",
        "serversFile",
        "magic",
        "manualTrades",
        "slippage",
        "quoteStreamingIntervalInSeconds",
        "type",
        "userId",
        "state",
        "tags",
        "metadata",
        "copyFactoryRoles",
        "resourceSlots",
        "copyFactoryResourceSlots"
      ],
      "properties": {
        "login": {
          "description": "MetaTrader account number",
          "type": "string"
        },
        "server": {
          "description": "MetaTrader server name to connect to",
          "type": "string"
        },
        "version": {
          "type": "number",
          "description": "MetaTrader version"
        },
        "brokerTimezone": {
          "description": "Broker timezone name from Time Zone Database",
          "type": "string"
        },
        "brokerDSTSwitchTimezone": {
          "description": "Timezone according to which daylight saving time switch happens on broker server",
          "type": "string"
        },
        "serversFile": {
          "description": "Content of provisioning profile",
          "type": "string"
        },
        "magic": {
          "description": "Magic value the trades should be performed using",
          "type": "number"
        },
        "manualTrades": {
          "description": "Flag indicating if trades placed on this account are manual trades. Default is false. Supported for G2 only.",
          "type": "boolean"
        },
        "slippage": {
          "description": "Default trade slippage in points. Should be greater or equal to zero. If not specified, system internal setting will be used which we believe is reasonable for most cases",
          "type": "number",
          "format": "integer"
        },
        "quoteStreamingIntervalInSeconds": {
          "description": "Quote streaming interval in seconds. Set to 0 in order to receive quotes on each tick. Default value is 2.5 seconds. Intervals less than 2.5 seconds are supported only for G2.",
          "type": "number"
        },
        "type": {
          "description": "Account type. Executing accounts as cloud-g2 is faster and cheaper.",
          "type": "string",
          "enum": [
            "cloud-g1",
            "cloud-g2"
          ]
        },
        "userId": {
          "description": "User id",
          "type": "string"
        },
        "state": {
          "type": "string",
          "description": "Current account state",
          "enum": [
            "CREATED",
            "DEPLOYING",
            "DEPLOYED",
            "DEPLOY_FAILED",
            "UNDEPLOYING",
            "UNDEPLOYED",
            "UNDEPLOY_FAILED",
            "DELETING",
            "DELETE_FAILED",
            "REDEPLOY_FAILED"
          ]
        },
        "tags": {
          "description": "User-defined account tags",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "metadata": {
          "description": "Extra information which can be stored together with your account. Total length of this field after serializing it to JSON is limited to 1024 characters",
          "type": "object",
          "additionalProperties": true
        },
        "copyFactoryRoles": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "PROVIDER",
              "SUBSCRIBER"
            ]
          },
          "description": "Account roles for CopyFactory2 API"
        },
        "resourceSlots": {
          "type": "integer",
          "description": "Number of resource slots to allocate to account. Allocating extra resource slots results in better account performance under load which is useful for some applications. E.g. if you have many accounts copying the same strategy via CooyFactory API, then you can increase resourceSlots to get a lower trade copying latency. Please note that allocating extra resource slots is a paid option. Default is 1"
        },
        "copyFactoryResourceSlots": {
          "type": "integer",
          "description": "Number of CopyFactory 2 resource slots to allocate to account. Allocating extra resource slots results in lower trade copying latency. Please note that allocating extra resource slots is a paid option. Please also note that CopyFactory 2 uses redundant infrastructure so that each CopyFactory resource slot is billed as 2 standard resource slots. You will be billed for CopyFactory 2 resource slots only if you have added your account to CopyFactory 2 by specifying copyFactoryRoles field. Default is 1."
        },
        "accountReplicas": {
          "type": "array",
          "description": "Account replicas",
          "items": {
            "type": "object",
            "required": [
              "_id",
              "state",
              "magic",
              "connectionStatus",
              "region"
            ],
            "properties": {
              "_id": {
                "type": "string",
                "description": "Unique account replica id"
              },
              "state": {
                "type": "string",
                "description": "Current account replica state",
                "enum": [
                  "CREATED",
                  "DEPLOYING",
                  "DEPLOYED",
                  "DEPLOY_FAILED",
                  "UNDEPLOYING",
                  "UNDEPLOYED",
                  "UNDEPLOY_FAILED",
                  "DELETING",
                  "DELETE_FAILED",
                  "REDEPLOY_FAILED"
                ]
              },
              "magic": {
                "description": "Magic value the trades should be performed using",
                "type": "number"
              },
              "connectionStatus": {
                "description": "Connection status of the MetaTrader terminal to the application",
                "type": "string",
                "enum": [
                  "CONNECTED",
                  "DISCONNECTED",
                  "DISCONNECTED_FROM_BROKER"
                ]
              },
              "quoteStreamingIntervalInSeconds": {
                "description": "Quote streaming interval in seconds. Set to 0 in order to receive quotes on each tick. Intervals less than 2.5 seconds are supported only for G2",
                "type": "number"
              },
              "symbol": {
                "description": " Any symbol provided by broker (required for G1 only)",
                "type": "string"
              },
              "reliability": {
                "type": "string",
                "description": "Used to increase the reliability of the account replica. High is a recommended value for production environment",
                "enum": [
                  "regular",
                  "high"
                ]
              },
              "tags": {
                "description": "User-defined account replica tags",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "metadata": {
                "description": "Extra information which can be stored together with your account replica. Total length of this field after serializing it to JSON is limited to 1024 characters",
                "type": "object",
                "additionalProperties": true
              },
              "resourceSlots": {
                "type": "integer",
                "description": "Number of resource slots to allocate to account replica. Allocating extra resource slots results in better account performance under load which is useful for some applications. E.g. if you have many accounts copying the same strategy via CooyFactory API, then you can increase resourceSlots to get a lower trade copying latency. Please note that allocating extra resource slots is a paid option"
              },
              "copyFactoryResourceSlots": {
                "type": "integer",
                "description": "Number of CopyFactory 2 resource slots to allocate to account replica. Allocating extra resource slots results in lower trade copying latency. Please note that allocating extra resource slots is a paid option. Please also note that CopyFactory 2 uses redundant infrastructure so that each CopyFactory resource slot is billed as 2 standard resource slots. You will be billed for CopyFactory 2 resource slots only if you have added your account to CopyFactory 2 by specifying copyFactoryRoles field"
              },
              "region": {
                "type": "string",
                "description": "Region id to deploy account replica at. One of returned by the /users/current/regions endpoint"
              },
              "createdAt": {
                "type": "string",
                "format": "datetime",
                "description": "Time the account replica was created at, in ISO format"
              }
            }
          }
        }
      }
    },
    "ListOfMetaTraderAccounts": {
      "type": "object",
      "required": [
        "count",
        "items"
      ],
      "properties": {
        "items": {
          "description": "array of accounts",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MetaTraderAccount"
          },
          "uniqueItems": true
        },
        "count": {
          "description": "total number of matching accounts",
          "type": "number"
        }
      }
    },
    "RegistrationData": {
      "type": "object",
      "required": [
        "name",
        "email",
        "login",
        "password",
        "brokerTimezone",
        "brokerDSTSwitchTimezone"
      ],
      "properties": {
        "name": {
          "description": "username",
          "type": "string"
        },
        "email": {
          "description": "email to login or register if the account is not already in the system",
          "type": "string"
        },
        "login": {
          "description": "Metatrader login. Only digits are allowed",
          "type": "string"
        },
        "password": {
          "description": "user password",
          "type": "string"
        },
        "slippage": {
          "description": "Default trade slippage in points. Should be greater or equal to zero. If not specified, system internal setting will be used which we believe is reasonable for most cases",
          "type": "number",
          "format": "integer"
        },
        "brokerTimezone": {
          "description": "Broker timezone name from Time Zone Database",
          "type": "string"
        },
        "brokerDSTSwitchTimezone": {
          "description": "Timezone according to which daylight saving time switch happens on broker server",
          "type": "string"
        }
      }
    },
    "MqlTokens": {
      "type": "object",
      "description": "MetaTrader account token and user access token",
      "required": [
        "token",
        "auth-token"
      ],
      "properties": {
        "token": {
          "description": "MetaTrader account token",
          "type": "string"
        },
        "auth-token": {
          "description": "authorization token value",
          "type": "string"
        },
        "accountId": {
          "description": "metatrader account id",
          "type": "string"
        }
      }
    },
    "UpdatedMetatraderAccount": {
      "type": "object",
      "required": [
        "name",
        "password",
        "server"
      ],
      "properties": {
        "name": {
          "description": "Human-readable account name",
          "type": "string"
        },
        "password": {
          "description": "MetaTrader account password. The password can be either investor password for read-only access or master password to enable trading features. Required for cloud account",
          "type": "string"
        },
        "server": {
          "description": "MetaTrader server name to connect to",
          "type": "string"
        },
        "manualTrades": {
          "description": "Flag indicating if trades placed on this account are manual trades. Supported for G2 only. Default is false.",
          "type": "boolean"
        },
        "slippage": {
          "description": "Default trade slippage in points. Should be greater or equal to zero. If not specified, system internal setting will be used which we believe is reasonable for most cases",
          "type": "number",
          "format": "integer"
        },
        "magic": {
          "description": "Magic value the trades should be performed using. When manualTrades field is set to true, magic value must be 0",
          "type": "number"
        },
        "quoteStreamingIntervalInSeconds": {
          "description": "Quote streaming interval in seconds. Set to 0 in order to receive quotes on each tick. Default value is 2.5 seconds. Intervals less than 2.5 seconds are supported only for G2",
          "type": "number"
        },
        "tags": {
          "description": "User-defined account tags",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "metadata": {
          "description": "Extra information which can be stored together with your account. Total length of this field after serializing it to JSON is limited to 1024 characters",
          "type": "object",
          "additionalProperties": true
        },
        "resourceSlots": {
          "type": "integer",
          "description": "Number of resource slots to allocate to account. Allocating extra resource slots results in better account performance under load which is useful for some applications. E.g. if you have many accounts copying the same strategy via CooyFactory API, then you can increase resourceSlots to get a lower trade copying latency. Please note that allocating extra resource slots is a paid option. Default is 1"
        },
        "copyFactoryResourceSlots": {
          "type": "integer",
          "description": "Number of CopyFactory 2 resource slots to allocate to account. Allocating extra resource slots results in lower trade copying latency. Please note that allocating extra resource slots is a paid option. Please also note that CopyFactory 2 uses redundant infrastructure so that each CopyFactory resource slot is billed as 2 standard resource slots. You will be billed for CopyFactory 2 resource slots only if you have added your account to CopyFactory 2 by specifying copyFactoryRoles field. Default is 1"
        }
      }
    },
    "UpdatedMetatraderAccountReplica": {
      "type": "object",
      "properties": {
        "magic": {
          "description": "Magic value the trades should be performed using. When manualTrades field is set to true, magic value must be 0",
          "type": "number"
        },
        "quoteStreamingIntervalInSeconds": {
          "description": "Quote streaming interval in seconds. Set to 0 in order to receive quotes on each tick. Default value is 2.5 seconds. Intervals less than 2.5 seconds are supported only for G2",
          "type": "number"
        },
        "tags": {
          "description": "User-defined account tags",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "metadata": {
          "description": "Extra information which can be stored together with your account. Total length of this field after serializing it to JSON is limited to 1024 characters",
          "type": "object",
          "additionalProperties": true
        },
        "resourceSlots": {
          "type": "integer",
          "description": "Number of resource slots to allocate to account. Allocating extra resource slots results in better account performance under load which is useful for some applications. E.g. if you have many accounts copying the same strategy via CooyFactory API, then you can increase resourceSlots to get a lower trade copying latency. Please note that allocating extra resource slots is a paid option. Default is 1"
        },
        "copyFactoryResourceSlots": {
          "type": "integer",
          "description": "Number of CopyFactory 2 resource slots to allocate to account. Allocating extra resource slots results in lower trade copying latency. Please note that allocating extra resource slots is a paid option. Please also note that CopyFactory 2 uses redundant infrastructure so that each CopyFactory resource slot is billed as 2 standard resource slots. You will be billed for CopyFactory 2 resource slots only if you have added your account to CopyFactory 2 by specifying copyFactoryRoles field. Default is 1"
        }
      }
    },
    "ExpertAdvisor": {
      "type": "object",
      "required": [
        "expertId",
        "period",
        "symbol",
        "fileUploaded"
      ],
      "properties": {
        "expertId": {
          "description": "Expert user defined id",
          "type": "string"
        },
        "period": {
          "description": "Expert advisor period",
          "type": "string"
        },
        "symbol": {
          "description": "Expert advisor symbol",
          "type": "string"
        },
        "fileUploaded": {
          "description": "True if expert file was uploaded",
          "type": "string"
        }
      }
    },
    "NewExpertAdvisor": {
      "type": "object",
      "required": [
        "symbol",
        "period",
        "preset"
      ],
      "properties": {
        "symbol": {
          "description": "Expert advisor symbol",
          "type": "string"
        },
        "period": {
          "description": "Expert advisor period. For MetaTrader 4 allowed periods are 1m, 5m, 15m, 30m, 1h, 4h, 1d, 1w, 1mn. For MetaTrader 5 allowed periods are 1m, 2m, 3m, 4m, 5m, 6m, 10m, 12m, 15m, 20m, 30m, 1h, 2h, 3h, 4h, 6h, 8h, 12h, 1d, 1w, 1mn",
          "type": "string"
        },
        "preset": {
          "description": "base64-encoded preset file",
          "type": "string"
        }
      }
    },
    "ClientServer": {
      "type": "object",
      "required": [
        "url",
        "hostname",
        "domain"
      ],
      "properties": {
        "url": {
          "description": "Client api server url",
          "type": "string"
        },
        "hostname": {
          "description": "Client api host name",
          "type": "string"
        },
        "domain": {
          "description": "Client api domain for regions",
          "type": "string"
        }
      }
    },
    "RetryLaterMessage": {
      "type": "object",
      "description": "Retry later message",
      "required": [
        "message",
        "retryAfter"
      ],
      "properties": {
        "message": {
          "description": "Response message with recommended retry time",
          "type": "string"
        },
        "retryAfter": {
          "description": "Recommended retry time in seconds",
          "type": "number"
        }
      }
    },
    "Region": {
      "type": "object",
      "description": "Region metadata",
      "required": [
        "name",
        "freeCapacity",
        "freeCopyFactoryCapacity",
        "freeMt5Capacity",
        "freeG1Capacity",
        "freeRegularCapacity",
        "freeRegularMt5Capacity",
        "freeRegularG1Capacity",
        "defaultForNewAccounts",
        "newAccountsAllowed",
        "newCopyFactoryAccountsAllowed",
        "newMt5AccountsAllowed",
        "newG1AccountsAllowed",
        "newRegularAccountsAllowed",
        "newRegularMt5AccountsAllowed",
        "newRegularG1AccountsAllowed",
        "hasManagerApi"
      ],
      "properties": {
        "name": {
          "description": "Region name",
          "type": "string"
        },
        "freeCapacity": {
          "description": "Estimated region free G2 capacity index",
          "type": "string",
          "enum": [
            "unknown",
            "0",
            "1+",
            "5+",
            "10+",
            "25+",
            "50+",
            "100+",
            "250+",
            "500+",
            "1000+"
          ]
        },
        "freeCopyFactoryCapacity": {
          "description": "Estimated region free CopyFactory capacity index",
          "type": "string",
          "enum": [
            "unknown",
            "0",
            "1+",
            "5+",
            "10+",
            "25+",
            "50+",
            "100+",
            "250+",
            "500+",
            "1000+"
          ]
        },
        "freeMt5Capacity": {
          "description": "Estimated region free MT5 G2 capacity index",
          "type": "string",
          "enum": [
            "unknown",
            "0",
            "1+",
            "5+",
            "10+",
            "25+",
            "50+",
            "100+",
            "250+",
            "500+",
            "1000+"
          ]
        },
        "freeG1Capacity": {
          "description": "Estimated region free G1 capacity index",
          "type": "string",
          "enum": [
            "unknown",
            "0",
            "1+",
            "5+",
            "10+",
            "25+",
            "50+",
            "100+",
            "250+",
            "500+",
            "1000+"
          ]
        },
        "freeRegularCapacity": {
          "description": "Estimated region free G2 regular reliability capacity index",
          "type": "string",
          "enum": [
            "unknown",
            "0",
            "1+",
            "5+",
            "10+",
            "25+",
            "50+",
            "100+",
            "250+",
            "500+",
            "1000+"
          ]
        },
        "freeRegularMt5Capacity": {
          "description": "Estimated region free MT5 G2 regular reliability capacity index",
          "type": "string",
          "enum": [
            "unknown",
            "0",
            "1+",
            "5+",
            "10+",
            "25+",
            "50+",
            "100+",
            "250+",
            "500+",
            "1000+"
          ]
        },
        "freeRegularG1Capacity": {
          "description": "Estimated region free G1 regular reliability capacity index",
          "type": "string",
          "enum": [
            "unknown",
            "0",
            "1+",
            "5+",
            "10+",
            "25+",
            "50+",
            "100+",
            "250+",
            "500+",
            "1000+"
          ]
        },
        "defaultForNewAccounts": {
          "description": "flag indicating that region is default for new accounts",
          "type": "boolean"
        },
        "newAccountsAllowed": {
          "description": "flag indicating that it is allowed to create new G2 accounts in this region",
          "type": "boolean"
        },
        "newCopyFactoryAccountsAllowed": {
          "description": "flag indicating that it is allowed to create new CopyFactory accounts in this region",
          "type": "boolean"
        },
        "newMt5AccountsAllowed": {
          "description": "flag indicating that it is allowed to create new G2 MT5 accounts in this region",
          "type": "boolean"
        },
        "newG1AccountsAllowed": {
          "description": "flag indicating that it is allowed to create new G1 accounts in this region",
          "type": "boolean"
        },
        "newRegularAccountsAllowed": {
          "description": "flag indicating that it is allowed to create new G2 regular reliability accounts in this region",
          "type": "boolean"
        },
        "newRegularMt5AccountsAllowed": {
          "description": "flag indicating that it is allowed to create new G2 regular reliability MT5 accounts in this region",
          "type": "boolean"
        },
        "newRegularG1AccountsAllowed": {
          "description": "flag indicating that it is allowed to create new G1 regular reliability accounts in this region",
          "type": "boolean"
        },
        "hasManagerApi": {
          "description": "flag indicating that manager API is deployed in this region",
          "type": "boolean"
        }
      }
    },
    "Metatrader4DemoAccountRequest": {
      "type": "object",
      "required": [
        "accountType",
        "balance",
        "email",
        "leverage",
        "serverName",
        "name",
        "phone"
      ],
      "properties": {
        "accountType": {
          "description": "Account type. Available account type values can be found in mobile MT application or in MT terminal downloaded from our broker",
          "type": "string"
        },
        "address": {
          "description": "Account holder's address",
          "type": "string"
        },
        "balance": {
          "description": "Account balance",
          "type": "number"
        },
        "email": {
          "description": "Account holder's email",
          "type": "string"
        },
        "leverage": {
          "description": "Account leverage",
          "type": "number"
        },
        "name": {
          "description": "Account holder's name",
          "type": "string"
        },
        "phone": {
          "description": "Account holder's phone, in international format",
          "type": "string"
        },
        "serverName": {
          "description": "Server name",
          "type": "string"
        }
      }
    },
    "Metatrader4LiveAccountRequest": {
      "type": "object",
      "required": [
        "accountType",
        "email",
        "leverage",
        "serverName",
        "name",
        "phone",
        "country",
        "zip",
        "state",
        "city",
        "address"
      ],
      "properties": {
        "accountType": {
          "description": "Account type. Available account type values can be found in mobile MT application or in MT terminal downloaded from our broker",
          "type": "string"
        },
        "address": {
          "description": "Account holder's address",
          "type": "string"
        },
        "city": {
          "description": "Account holder's city",
          "type": "string"
        },
        "country": {
          "description": "Account holder's country",
          "type": "string"
        },
        "email": {
          "description": "Account holder's email",
          "type": "string"
        },
        "leverage": {
          "description": "Account leverage",
          "type": "number"
        },
        "name": {
          "description": "Account holder's name",
          "type": "string"
        },
        "phone": {
          "description": "Account holder's phone, in international format",
          "type": "string"
        },
        "serverName": {
          "description": "Server name",
          "type": "string"
        },
        "state": {
          "description": "Account holder's state",
          "type": "string"
        },
        "zip": {
          "description": "Zip address",
          "type": "string"
        }
      }
    },
    "Metatrader5DemoAccountRequest": {
      "type": "object",
      "required": [
        "accountType",
        "balance",
        "email",
        "leverage",
        "serverName",
        "name",
        "phone"
      ],
      "properties": {
        "accountType": {
          "description": "Account type. Available account type values can be found in mobile MT application or in MT terminal downloaded from our broker",
          "type": "string"
        },
        "balance": {
          "description": "Account balance",
          "type": "number"
        },
        "email": {
          "description": "Account holder's email",
          "type": "string"
        },
        "leverage": {
          "description": "Account leverage",
          "type": "number"
        },
        "name": {
          "description": "Account holder's name",
          "type": "string"
        },
        "phone": {
          "description": "Account holder's phone, in international format",
          "type": "string"
        },
        "serverName": {
          "description": "Server name",
          "type": "string"
        }
      }
    },
    "Metatrader5LiveAccountRequest": {
      "type": "object",
      "required": [
        "accountType",
        "email",
        "leverage",
        "serverName",
        "name",
        "phone",
        "country",
        "zip",
        "state",
        "city",
        "address"
      ],
      "properties": {
        "accountType": {
          "description": "Account type. Available account type values can be found in mobile MT application or in MT terminal downloaded from our broker",
          "type": "string"
        },
        "address": {
          "description": "Account holder's address",
          "type": "string"
        },
        "city": {
          "description": "Account holder's city",
          "type": "string"
        },
        "country": {
          "description": "Account holder's country",
          "type": "string"
        },
        "email": {
          "description": "Account holder's email",
          "type": "string"
        },
        "leverage": {
          "description": "Account leverage",
          "type": "number"
        },
        "name": {
          "description": "Account holder's name",
          "type": "string"
        },
        "phone": {
          "description": "Account holder's phone, in international format",
          "type": "string"
        },
        "serverName": {
          "description": "Server name",
          "type": "string"
        },
        "state": {
          "description": "Account holder's state",
          "type": "string"
        },
        "zip": {
          "description": "Zip address",
          "type": "string"
        }
      }
    },
    "MetatraderAccountCredentials": {
      "type": "object",
      "required": [
        "investorPassword",
        "login",
        "password",
        "serverName"
      ],
      "properties": {
        "investorPassword": {
          "description": "Inverstor password",
          "type": "string"
        },
        "login": {
          "description": "Account login",
          "type": "string"
        },
        "password": {
          "description": "Account password",
          "type": "string"
        },
        "serverName": {
          "description": "MetaTrader server name",
          "type": "string"
        }
      }
    },
    "SchedulerTask": {
      "type": "object",
      "required": [
        "status"
      ],
      "properties": {
        "status": {
          "description": "Task status",
          "$ref": "#/definitions/TaskStatus"
        }
      }
    },
    "TaskStatus": {
      "type": "object",
      "required": [
        "status",
        "startedAt",
        "completedAt",
        "progress"
      ],
      "properties": {
        "status": {
          "description": "Task status",
          "type": "string"
        },
        "startedAt": {
          "description": "Task started date",
          "type": "string",
          "format": "date-time"
        },
        "completedAt": {
          "description": "Task completed date",
          "type": "string",
          "format": "date-time"
        },
        "progress": {
          "description": "Task progress",
          "type": "object"
        }
      }
    },
    "DataSet": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "description": "data set id",
          "type": "string"
        },
        "description": {
          "description": "human-readable description",
          "type": "string"
        }
      }
    },
    "DataSetParams": {
      "type": "object",
      "additionalProperties": true
    },
    "HealthCheckResult": {
      "type": "object",
      "required": [
        "id",
        "output"
      ],
      "properties": {
        "check": {
          "description": "id of the health check",
          "type": "string"
        },
        "output": {
          "description": "health check output",
          "type": "string"
        }
      }
    },
    "Error": {
      "type": "object",
      "required": [
        "id",
        "error",
        "message"
      ],
      "properties": {
        "id": {
          "description": "Error id",
          "type": "integer"
        },
        "error": {
          "description": "Error name",
          "type": "string"
        },
        "message": {
          "description": "Error description",
          "type": "string"
        },
        "details": {
          "description": "Additional information about error",
          "type": "object"
        },
        "code": {
          "description": "Error code, used for i18n",
          "type": "string"
        },
        "arguments": {
          "description": "Error message arguments, used for i18n",
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      }
    },
    "TooManyRequestsError": {
      "type": "object",
      "required": [
        "id",
        "name",
        "message",
        "metadata"
      ],
      "properties": {
        "id": {
          "description": "Error id",
          "type": "integer"
        },
        "name": {
          "description": "Error name",
          "type": "string"
        },
        "message": {
          "description": "Error description",
          "type": "string"
        },
        "metadata": {
          "type": "object",
          "required": [
            "period",
            "requestsPerPeriodAllowed",
            "recommendedRetryTime"
          ],
          "properties": {
            "periodInMinutes": {
              "description": "rate limiting period in minutes",
              "type": "number"
            },
            "requestsPerPeriodAllowed": {
              "description": "allowed number of requests per period",
              "type": "number"
            },
            "recommendedRetryTime": {
              "description": "recommended time to retry request",
              "type": "string",
              "format": "datetime"
            }
          }
        }
      }
    }
  }
}
